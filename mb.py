import streamlit as st
from fpdf import FPDF
import datetime
from pathlib import Path
import pytz
import requests
import base64
import json
import unicodedata

ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets["SENDGRID_API_KEY"]
SENDER_EMAIL = "alexandre.moiteiro@students.sevenair.com"

def ascii_safe(text):
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

def get_limits_text(ac):
    units = ac["units"]["weight"]
    arm_unit = ac["units"]["arm"]
    return [
        f"Max Takeoff Weight: {ac['max_takeoff_weight']} {units}",
        f"Max Fuel Volume: {ac['max_fuel_volume']} L",
        f"Max Pilot+Passenger: {ac['max_passenger_weight']} {units}",
        f"Max Baggage: {ac['max_baggage_weight']} {units}",
        f"CG Limits: {ac['cg_limits'][0]} to {ac['cg_limits'][1]} {arm_unit}",
    ]

def get_color(val, limit):
    if limit is None: return "ok"
    if val > limit:
        return "bad"
    elif val > (limit * 0.95):
        return "warn"
    else:
        return "ok"

def get_rgb_status(val, limit):
    # Retorna (R, G, B) para ok, warn, bad
    if limit is None: return (29, 133, 51)  # verde
    if val > limit:
        return (194, 28, 28)  # vermelho
    elif val > (limit * 0.95):
        return (216, 170, 34) # amarelo
    else:
        return (29, 133, 51)  # verde

def get_cg_color(cg, limits):
    if not limits: return "ok"
    mn, mx = limits
    margin = (mx - mn) * 0.05
    if cg < mn or cg > mx:
        return "bad"
    elif cg < mn + margin or cg > mx - margin:
        return "warn"
    else:
        return "ok"

def get_cg_rgb(cg, limits):
    if not limits: return (29, 133, 51)
    mn, mx = limits
    margin = (mx - mn) * 0.05
    if cg < mn or cg > mx:
        return (194, 28, 28)
    elif cg < mn + margin or cg > mx - margin:
        return (216, 170, 34)
    else:
        return (29, 133, 51)

def utc_now():
    return datetime.datetime.now(pytz.UTC)

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        footer_text = (
            "This document is for assistance and cross-checking only. "
            "It does not replace your responsibility to perform and verify your own calculations before flight.\n  "
            f"Generated by {WEBSITE_LINK}"
        )
        self.multi_cell(0, 2.8, ascii_safe(footer_text), align='C')
        self.set_text_color(0,0,0)

st.set_page_config(
    page_title="Mass & Balance Planner",
    page_icon="ðŸ“Š",
    layout="wide"
)

def inject_css():
    st.markdown("""
    <style>
    html, body, [class*="css"] {
        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
        font-size: 15px;
        line-height: 1.58;
    }
    .block-container { max-width: 1120px !important; margin: auto; padding-top:16px;}
    .mb-header {
        font-size: 1.27rem;
        font-weight: 800;
        letter-spacing: .02em;
        color: inherit;
        border-bottom: 1px solid #e5e7ec;
        margin-bottom: 0;
        padding-bottom: 7px;
        text-transform: uppercase;
    }
    .mb-limits {
        font-size: 0.98rem;
        color: inherit;
        margin-bottom: 10px;
        padding: 2px 0 3px 0;
    }
    .mb-limits ul {
        margin: 0 0 8px 0;
        padding-left: 20px;
    }
    .mb-limits li {
        margin-bottom: 2px;
        font-size: 0.96rem;
        list-style-type: disc;
    }
    .mb-table {
        border-collapse: collapse;
        width: 100%;
        background: inherit;
        font-size: 0.98rem;
        margin: 0 0 10px 0;
    }
    .mb-table th {
        font-weight: 700;
        border-bottom: 2px solid #cbd0d6;
        color: #23282f;
        background: transparent;
    }
    @media (prefers-color-scheme: dark) {
        .mb-table th {
            color: #f6f8fa !important;
            border-bottom: 2px solid #4c5263 !important;
        }
        .mb-table td {
            color: #f6f8fa !important;
        }
    }
    .mb-table td { color: inherit; font-weight: 500; text-align:center;}
    .mb-table td:first-child {text-align:left;}
    .mb-table tr:last-child td { border-bottom: none; }
    .mb-summary { font-size: 1.08rem; margin-bottom: 9px;}
    .mb-summary-row { display: flex; align-items: baseline; justify-content: space-between; margin: 4px 0;}
    .mb-summary-label { color: inherit;}
    .mb-summary-val { font-weight: 600; letter-spacing: .02em;}
    .ok { color: #1d8533;}
    .warn { color: #d8aa22;}
    .bad { color: #c21c1c;}
    .mb-alert {
        background: var(--secondary-background-color, #fff7f6);
        border-left: 5px solid #c21c1c;
        color: #b51e14;
        font-weight: 600;
        font-size: 1.03rem;
        padding: 8px 15px 8px 17px;
        margin-bottom: 13px;
        margin-top: 9px;
    }
    .mb-section {
        background: transparent !important;
        border: none !important;
        border-radius: 0 !important;
        box-shadow: none !important;
        padding: 0 !important;
        margin-bottom: 20px;
    }
    .mb-pdf-section {margin-top:18px;}
    .stDownloadButton {margin-top:11px;}
    .mb-contact-panel {
        background: var(--secondary-background-color, #f8fafd);
        border:1px solid #e5e7ec;
        padding:12px 12px 8px 12px;
        border-radius: 7px;
        margin-top: 10px;
        box-shadow: none;
    }
    .footer {margin-top:32px;font-size:0.96rem;color:var(--text-color,#a0a8b6);text-align:center;}
    .stButton>button {width:100%;}
    .st-expander {border-radius:0;}
    .mb-aircraft-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0 0 18px 0;
        width: 100%;
    }
    .mb-aircraft-icon img {
        max-width: 260px !important;
        width: 100% !important;
        height: auto !important;
        border: none !important;
        background: transparent !important;
        box-shadow: none !important;
        margin: auto;
        padding: 0;
        display: block;
        filter: drop-shadow(0px 2px 12px #b1b3c222);
        image-rendering: auto;
    }
    </style>
    """, unsafe_allow_html=True)

st.set_page_config(
    page_title="Mass & Balance Planner",
    page_icon=None,
    layout="wide",
    initial_sidebar_state="collapsed"
)
inject_css()

# --- AIRCRAFT DATA ---
aircraft_data = {
    "Tecnam P2008": {
        "fuel_arm": 2.209,
        "pilot_arm": 1.800,
        "baggage_arm": 2.417,
        "max_takeoff_weight": 650,
        "max_fuel_volume": 124.0,
        "max_passenger_weight": 230,
        "max_baggage_weight": 20,
        "cg_limits": (1.841, 1.978),
        "fuel_density": 0.72,
        "units": {"weight": "kg", "arm": "m"}
    }
}
icons = {
    "Tecnam P2008": "tecnam_icon.png"
}
afm_files = {
    "Tecnam P2008": "Tecnam_P2008_AFM.pdf"
}

# --- HEADER ---
st.markdown(f'<div class="mb-header">Mass & Balance Planner</div>', unsafe_allow_html=True)
cols = st.columns([0.48, 0.02, 0.5], gap="large")

# --- LEFT: Aircraft info, limits, input form grouped at the top ---
with cols[0]:
    aircrafts = list(aircraft_data.keys())
    options = aircrafts + ["More aircraft coming soon..."]
    aircraft = st.selectbox(
        "Aircraft type",
        options,
        index=0,
        format_func=lambda x: x if x in aircraft_data else x + " (disabled)",
    )
    if aircraft not in aircraft_data:
        st.info("More aircraft coming soon!")
        st.stop()
    ac = aircraft_data[aircraft]
    icon_path = icons.get(aircraft)

    inner_cols = st.columns([0.01, 0.99])
    with inner_cols[1]:
        if icon_path and Path(icon_path).exists():
            st.markdown(
                f'<div class="mb-aircraft-icon"><img src="data:image/png;base64,{base64.b64encode(Path(icon_path).read_bytes()).decode()}" alt="Aircraft Icon" /></div>',
                unsafe_allow_html=True,
            )
        st.markdown(
            '<div class="mb-limits"><ul>' +
            "".join([f"<li>{x}</li>" for x in get_limits_text(ac)]) +
            '</ul></div>', unsafe_allow_html=True
        )
        afm_path = afm_files.get(aircraft)
        if afm_path and Path(afm_path).exists():
            with open(afm_path, "rb") as f:
                st.download_button("Download Aircraft Flight Manual (AFM)", f, file_name=afm_path, mime="application/pdf")

    # --- INPUT FORM ---
    with st.form("input_form"):
        units_wt = ac['units']['weight']
        units_arm = ac['units']['arm']
        st.markdown("### Enter Weights")
        ew = st.number_input(f"Empty Weight ({units_wt})", min_value=0.0, value=st.session_state.get("ew", 0.0), step=1.0, key="ew")
        ew_moment = st.number_input(f"Empty Weight Moment ({units_wt}Â·{units_arm})", min_value=0.0, value=st.session_state.get("ew_moment", 0.0), step=1.0, key="ew_moment")
        ew_arm = ew_moment / ew if ew > 0 else 0.0
        student = st.number_input(f"Student Weight ({units_wt})", min_value=0.0, value=st.session_state.get("student", 0.0), step=1.0, key="student")
        instructor = st.number_input(f"Instructor Weight ({units_wt})", min_value=0.0, value=st.session_state.get("instructor", 0.0), step=1.0, key="instructor")
        pilot = student + instructor
        bag1 = st.number_input(f"Baggage ({units_wt})", min_value=0.0, value=st.session_state.get("bag1", 0.0), step=1.0, key="bag1")
        bag2 = 0.0

        fuel_mode = st.radio(
            "Fuel Input Mode",
            ["Automatic maximum fuel (default)", "Manual fuel volume"],
            index=0 if st.session_state.get("fuel_mode", "Automatic maximum fuel (default)") == "Automatic maximum fuel (default)" else 1,
            key="fuel_mode",
            help="Automatic maximum fuel (default): Fuel will be maximized as per limitations."
        )
        fuel_density = ac['fuel_density']
        if fuel_mode == "Manual fuel volume":
            manual_fuel_vol = st.number_input("Fuel Volume (L)", min_value=0.0, value=st.session_state.get("manual_fuel_vol", 0.0), step=1.0, key="manual_fuel_vol")
        form_submitted = st.form_submit_button("Update")
        # MantÃ©m estado atualizado
        if form_submitted:
            st.session_state["ew"] = ew
            st.session_state["ew_moment"] = ew_moment
            st.session_state["student"] = student
            st.session_state["instructor"] = instructor
            st.session_state["bag1"] = bag1
            st.session_state["fuel_mode"] = fuel_mode
            if fuel_mode == "Manual fuel volume":
                st.session_state["manual_fuel_vol"] = st.session_state.get("manual_fuel_vol", 0.0)

# --- LOGIC ---
fuel_mode = st.session_state.get("fuel_mode", "Automatic maximum fuel (default)")
if fuel_mode == "Automatic maximum fuel (default)":
    useful_load = ac['max_takeoff_weight'] - (ew + pilot + bag1 + bag2)
    fuel_weight_possible = max(0.0, useful_load)
    tank_capacity_weight = ac['max_fuel_volume'] * ac['fuel_density']
    if fuel_weight_possible <= tank_capacity_weight:
        fuel_weight = fuel_weight_possible
        fuel_vol = fuel_weight / ac['fuel_density']
        fuel_limit_by = "Maximum Weight"
    else:
        fuel_weight = tank_capacity_weight
        fuel_vol = ac['max_fuel_volume']
        fuel_limit_by = "Tank Capacity"
else:
    fuel_vol = st.session_state.get("manual_fuel_vol", 0.0)
    fuel_weight = fuel_vol * ac["fuel_density"]
    fuel_limit_by = "Manual Entry"

m_empty = ew_moment
m_pilot = (student + instructor) * ac['pilot_arm']
m_bag1 = bag1 * ac['baggage_arm']
m_bag2 = 0.0
m_fuel = fuel_weight * ac['fuel_arm']

total_weight = ew + student + instructor + bag1 + bag2 + fuel_weight
total_moment = m_empty + m_pilot + m_bag1 + m_bag2 + m_fuel
cg = (total_moment / total_weight) if total_weight > 0 else 0
baggage_sum = bag1 + bag2
alert_list = []
if total_weight > ac['max_takeoff_weight']:
    alert_list.append("Total weight exceeds maximum takeoff weight.")
if bag1 > ac['max_baggage_weight']:
    alert_list.append("Baggage exceeds allowed limit.")
if ac.get("max_passenger_weight") and (student + instructor) > ac["max_passenger_weight"]:
    alert_list.append("Pilot + Passenger (student + instructor) exceed allowed limit.")
if ac['cg_limits']:
    mn, mx = ac['cg_limits']
    if cg < mn or cg > mx:
        alert_list.append("CG outside safe envelope.")

# --- RIGHT: Output Panel ---
with cols[2]:
    st.markdown('<div class="mb-section">', unsafe_allow_html=True)
    st.markdown('<div class="section-title">Calculation Summary</div>', unsafe_allow_html=True)
    st.markdown('<div class="mb-summary">', unsafe_allow_html=True)
    if fuel_limit_by == "Tank Capacity":
        limit_word = "Limited by: Tank Capacity"
    elif fuel_limit_by == "Maximum Weight":
        limit_word = "Limited by: Maximum Weight"
    elif fuel_limit_by == "Manual Entry":
        limit_word = "Manual Entry"
    else:
        limit_word = fuel_limit_by
    st.markdown(
        f'<div class="mb-summary-row"><div class="mb-summary-label">Fuel</div><div class="mb-summary-val ok">{fuel_vol:.1f} L / {fuel_weight:.1f} {ac["units"]["weight"]}<span style="color:#8c8c8c;font-size:0.97em;"> &nbsp;({limit_word})</span></div></div>',
        unsafe_allow_html=True
    )
    st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label">Total Weight</div><div class="mb-summary-val {get_color(total_weight, ac["max_takeoff_weight"])}">{total_weight:.2f} {ac["units"]["weight"]}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label">Total Moment</div><div class="mb-summary-val">{total_moment:.2f} {ac["units"]["weight"]}Â·{ac["units"]["arm"]}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label">Pilot + Passenger</div><div class="mb-summary-val {get_color(student+instructor, ac["max_passenger_weight"])}">{student+instructor:.2f} {ac["units"]["weight"]}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label"> - Student</div><div class="mb-summary-val">{student:.2f} {ac["units"]["weight"]}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label"> - Instructor</div><div class="mb-summary-val">{instructor:.2f} {ac["units"]["weight"]}</div></div>', unsafe_allow_html=True)
    if ac['cg_limits']:
        st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label">CG</div><div class="mb-summary-val {get_cg_color(cg, ac["cg_limits"])}">{cg:.3f} {ac["units"]["arm"]}</div></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="mb-summary-row"><div class="mb-summary-label">CG Limits</div><div class="mb-summary-val">{ac["cg_limits"][0]:.3f} to {ac["cg_limits"][1]:.3f} {ac["units"]["arm"]}</div></div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    for a in alert_list:
        st.markdown(f'<div class="mb-alert">{a}</div>', unsafe_allow_html=True)
    st.markdown('<div style="height:10px;"></div>', unsafe_allow_html=True)
    st.markdown('<div class="section-title" style="margin-bottom:9px;">Mass & Balance Table</div>', unsafe_allow_html=True)
    items = [
        ("Empty Weight", ew, ew_arm, m_empty),
        ("Pilot & Passenger", student + instructor, ac['pilot_arm'], m_pilot),
        ("Baggage", bag1, ac['baggage_arm'], m_bag1),
        ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
    ]
    def mb_table(items, units_wt, units_arm):
        table = '<table class="mb-table">'
        table += (
            "<tr>"
            "<th>Item</th>"
            f"<th>Weight ({units_wt})</th>"
            f"<th>Arm ({units_arm})</th>"
            f"<th>Moment ({units_wt}Â·{units_arm})</th>"
            "</tr>"
        )
        for i in items:
            table += f"<tr><td>{i[0]}</td><td>{i[1]:.2f}</td><td>{i[2]:.3f}</td><td>{i[3]:.2f}</td></tr>"
        table += "</table>"
        return table
    st.markdown(mb_table(items, ac['units']['weight'], ac['units']['arm']), unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # --- PDF GENERATION ---
    st.markdown('<div class="mb-section mb-pdf-section">', unsafe_allow_html=True)
    st.markdown('<div class="section-title">PDF Report</div>', unsafe_allow_html=True)
    with st.expander("Generate PDF report", expanded=False):
        pilot_name = st.text_input('Pilot name / Prepared by *', value="", help="This field is required.")
        registration = st.text_input("Aircraft registration", value="CS-XXX")
        mission_number = st.text_input("Mission number", value="001")
        utc_today = utc_now()
        default_datetime = utc_today.strftime("%Y-%m-%d %H:%M UTC")
        flight_datetime_utc = st.text_input("Scheduled flight date and time (UTC)", value=default_datetime)
        flight_datetime_no_utc = flight_datetime_utc.replace(" UTC", "").strip()
        pilot_name_valid = bool(pilot_name.strip())
        pdf_button = st.button("Generate PDF with current values", disabled=not pilot_name_valid)
        if pdf_button and pilot_name_valid:
            try:
                pdf = CustomPDF()
                pdf.set_auto_page_break(auto=True, margin=10)
                pdf.add_page()
                pdf.set_fill_color(34,34,34)
                pdf.rect(0, 0, 210, 15, 'F')
                pdf.set_font("Arial", 'B', 15)
                pdf.set_text_color(255,255,255)
                pdf.set_xy(10,7)
                pdf.cell(0, 7, ascii_safe("MASS & BALANCE REPORT"), ln=True, align='L')
                pdf.set_text_color(0,0,0)
                pdf.set_xy(10,20)
                pdf.ln(3)
                pdf.set_font("Arial", 'B', 12)
                pdf.cell(0, 7, ascii_safe(f"{aircraft}  |  {registration}"), ln=True)
                pdf.set_font("Arial", '', 11)
                pdf.cell(0, 6, ascii_safe(f"Mission Number: {mission_number}"), ln=True)
                pdf.cell(0, 6, ascii_safe(f"Flight: {flight_datetime_no_utc} UTC"), ln=True)
                pdf.cell(0, 6, ascii_safe(f"Prepared by: {pilot_name}"), ln=True)
                pdf.cell(0, 6, ascii_safe("Operator: Sevenair Academy"), ln=True)
                pdf.ln(2)
                pdf.set_font("Arial", 'B', 10)
                pdf.cell(0, 6, ascii_safe("Operational Limits:"), ln=True)
                pdf.set_font("Arial", '', 9)
                for line in get_limits_text(ac):
                    pdf.cell(0, 5, ascii_safe(line), ln=True)
                pdf.ln(1)
                pdf.set_font("Arial", 'B', 10)
                col_widths = [45, 36, 34, 55]
                headers = ["Item", f"Weight ({ac['units']['weight']})", f"Arm ({ac['units']['arm']})", f"Moment ({ac['units']['weight']}Â·{ac['units']['arm']})"]
                for h, w in zip(headers, col_widths):
                    pdf.cell(w, 7, ascii_safe(h), border=1, align='C')
                pdf.ln()
                pdf.set_font("Arial", '', 9)
                rows = [
                    ("Empty Weight", ew, ew_arm, m_empty),
                    ("Pilot & Passenger", student + instructor, ac['pilot_arm'], m_pilot),
                    ("Baggage", bag1, ac['baggage_arm'], m_bag1),
                    ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
                ]
                for row in rows:
                    for idx, (val, w) in enumerate(zip(row, col_widths)):
                        if idx == 1: # Peso
                            if row[0] == "Empty Weight":
                                rgb = (50, 50, 50)
                            elif row[0] == "Pilot & Passenger":
                                rgb = get_rgb_status(row[1], ac["max_passenger_weight"])
                            elif row[0] == "Baggage":
                                rgb = get_rgb_status(row[1], ac["max_baggage_weight"])
                            elif row[0] == "Fuel":
                                rgb = (50, 50, 50)
                            else:
                                rgb = (50, 50, 50)
                            pdf.set_fill_color(*rgb)
                            pdf.cell(w, 7, ascii_safe(f"{val:.2f}" if isinstance(val, float) else str(val)), border=1, align='C', fill=True)
                        else:
                            pdf.set_fill_color(255,255,255)
                            if isinstance(val, str):
                                pdf.cell(w, 7, ascii_safe(val), border=1)
                            else:
                                pdf.cell(w, 7, ascii_safe(f"{val:.2f}" if isinstance(val, float) else str(val)), border=1, align='C')
                    pdf.ln()
                pdf.ln(1)
                pdf.set_font("Arial", 'B', 10)
                pdf.set_text_color(50,50,50)
                if fuel_mode == "Automatic maximum fuel (default)":
                    limit_expl = "Limited by: " + ("Tank Capacity" if fuel_limit_by == "Tank Capacity" else "Maximum Weight")
                elif fuel_limit_by == "Manual Entry":
                    limit_expl = "Manual Entry"
                else:
                    limit_expl = fuel_limit_by
                fuel_str = f"Fuel: {fuel_vol:.1f} L / {fuel_weight:.1f} {ac['units']['weight']} ({limit_expl})"
                pdf.cell(0, 6, ascii_safe(fuel_str), ln=True)
                # Color code nos campos principais do sumÃ¡rio
                # Total Weight
                rgb = get_rgb_status(total_weight, ac["max_takeoff_weight"])
                pdf.set_fill_color(*rgb)
                pdf.cell(0, 6, ascii_safe(f"Total Weight: {total_weight:.2f} {ac['units']['weight']}"), ln=True, fill=True)
                # Total Moment (nÃ£o tem limite)
                pdf.set_fill_color(255,255,255)
                pdf.cell(0, 6, ascii_safe(f"Total Moment: {total_moment:.2f} {ac['units']['weight']}Â·{ac['units']['arm']}"), ln=True)
                # Pilot + Passenger
                rgb = get_rgb_status(student + instructor, ac["max_passenger_weight"])
                pdf.set_fill_color(*rgb)
                pdf.cell(0, 6, ascii_safe(f"Pilot + Passenger: {student+instructor:.2f} {ac['units']['weight']}"), ln=True, fill=True)
                pdf.set_fill_color(255,255,255)
                pdf.cell(0, 6, ascii_safe(f" - Student: {student:.2f} {ac['units']['weight']}"), ln=True)
                pdf.cell(0, 6, ascii_safe(f" - Instructor: {instructor:.2f} {ac['units']['weight']}"), ln=True)
                if ac['cg_limits']:
                    rgb = get_cg_rgb(cg, ac['cg_limits'])
                    pdf.set_fill_color(*rgb)
                    pdf.cell(0, 6, ascii_safe(f"CG: {cg:.3f} {ac['units']['arm']}"), ln=True, fill=True)
                    pdf.set_fill_color(255,255,255)
                    pdf.cell(0, 6, ascii_safe(f"CG Limits: {ac['cg_limits'][0]:.3f} to {ac['cg_limits'][1]:.3f} {ac['units']['arm']}"), ln=True)
                # Alertas
                if alert_list:
                    pdf.set_font("Arial", 'B', 9)
                    pdf.set_text_color(200,0,0)
                    for a in list(dict.fromkeys(alert_list)):
                        pdf.cell(0, 6, ascii_safe(f"WARNING: {a}"), ln=True)
                    pdf.set_text_color(0,0,0)
                pdf_file = f"mass_balance_mission{mission_number}.pdf"
                pdf.output(pdf_file)
                with open(pdf_file, "rb") as f:
                    st.download_button("Download PDF", f, file_name=pdf_file, mime="application/pdf")
                st.success("PDF generated successfully!")
                # ---- EMAIL SEND (with error handling) ----
                try:
                    with open(pdf_file, "rb") as f:
                        pdf_bytes = f.read()
                    html_body = f"""
                    <html>
                    <body>
                        <h2>Mass & Balance Report</h2>
                        <table style='border-collapse:collapse;'>
                            <tr><th align='left'>Pilot</th><td>{pilot_name}</td></tr>
                            <tr><th align='left'>Aircraft</th><td>{aircraft} ({registration})</td></tr>
                            <tr><th align='left'>Mission</th><td>{mission_number}</td></tr>
                            <tr><th align='left'>Flight (UTC)</th><td>{flight_datetime_no_utc} UTC</td></tr>
                            <tr><th align='left'>Submitted from</th><td>{WEBSITE_LINK}</td></tr>
                        </table>
                        <p style='margin-top:1.5em;'>See attached PDF for details.</p>
                    </body>
                    </html>
                    """
                    data = {
                        "personalizations": [
                            {
                                "to": [{"email": ADMIN_EMAIL}],
                                "subject": f"Mass & Balance - {pilot_name.strip()}"
                            }
                        ],
                        "from": {"email": SENDER_EMAIL},
                        "content": [
                            {
                                "type": "text/html",
                                "value": html_body
                            }
                        ],
                        "attachments": [{
                            "content": base64.b64encode(pdf_bytes).decode(),
                            "type": "application/pdf",
                           (filename continued)
```python
                            "filename": pdf_file,
                            "disposition": "attachment"
                        }]
                    }
                    headers = {
                        "Authorization": f"Bearer {SENDGRID_API_KEY}",
                        "Content-Type": "application/json"
                    }
                    resp = requests.post("https://api.sendgrid.com/v3/mail/send", data=json.dumps(data), headers=headers)
                    if resp.status_code >= 400:
                        st.warning(f"PDF generated but failed to send email (check SENDGRID_API_KEY and email settings). Error: {resp.text}")
                        print(f"SendGrid error: {resp.text}")
                except Exception as e:
                    st.warning(f"PDF generated but failed to send email: {e}")
                    print(f"SendGrid Exception: {e}")
            except Exception as e:
                st.error(f"PDF generation or email failed: {e}")
    st.markdown('</div>', unsafe_allow_html=True)

# --- CONTACT AND FOOTER ---
st.markdown('<div class="footer">Site developed by Alexandre Moiteiro. All rights reserved.</div>', unsafe_allow_html=True)
with st.expander("Contact / Suggestion / Bug", expanded=False):
    sug_name = st.text_input("Your name", value="", key="sug_nome_footer")
    sug_email = st.text_input("Your email (optional)", value="", key="sug_email_footer")
    sug_msg = st.text_area("Message", height=70, max_chars=900, key="sug_msg_footer")
    sug_send = st.button("Send message", key="sug_btn_footer")
    if sug_send:
        if not sug_msg.strip():
            st.warning("Please write your message before sending.")
        else:
            try:
                html_body = f"""
                <html>
                <body>
                    <h2>Suggestion, bug, or message via Mass & Balance</h2>
                    <table style='border-collapse:collapse;'>
                        <tr><th align='left'>Name</th><td>{sug_name}</td></tr>
                        <tr><th align='left'>Email</th><td>{sug_email}</td></tr>
                    </table>
                    <p style='margin-top:1.2em;'><b>Message:</b><br>{sug_msg}</p>
                </body>
                </html>
                """
                data = {
                    "personalizations": [
                        {
                            "to": [{"email": ADMIN_EMAIL}],
                            "subject": "Suggestion/Bug/Contact from Mass & Balance site"
                        }
                    ],
                    "from": {"email": SENDER_EMAIL},
                    "content": [
                        {
                            "type": "text/html",
                            "value": html_body
                        }
                    ]
                }
                headers = {
                    "Authorization": f"Bearer {SENDGRID_API_KEY}",
                    "Content-Type": "application/json"
                }
                resp = requests.post("https://api.sendgrid.com/v3/mail/send", data=json.dumps(data), headers=headers)
                if resp.status_code >= 400:
                    st.warning(f"Message not sent (check SENDGRID_API_KEY and email settings). Error: {resp.text}")
                    print(f"SendGrid error: {resp.text}")
                else:
                    st.success("Message sent successfully. Thank you for your feedback.")
            except Exception as e:
                st.warning(f"Failed to send message: {e}")
                print(f"SendGrid Exception: {e}")

