import streamlit as st
from fpdf import FPDF
import datetime
import pytz
from pathlib import Path
import unicodedata
import io
import pandas as pd

# ========== CONFIGURAÇÕES ==========
ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"

# ========== FUNÇÕES UTILITÁRIAS ==========

def ascii_safe(text):
    """Remove acentos e caracteres não ASCII para compatibilidade com PDF."""
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

def utc_now():
    """Retorna data/hora atual em UTC (formatada)."""
    return datetime.datetime.now(pytz.UTC)

@st.cache_resource
def load_aircraft_data():
    """Carrega dados de aeronaves suportadas."""
    return {
        "Tecnam P2008": {
            "fuel_arm": 2.209,
            "pilot_arm": 1.800,
            "baggage_arm": 2.417,
            "max_takeoff_weight": 650,
            "max_fuel_volume": 124.0,
            "max_passenger_weight": 230,
            "max_baggage_weight": 20,
            "cg_limits": (1.841, 1.978),
            "fuel_density": 0.72,
            "units": {"weight": "kg", "arm": "m"}
        },
        # Adicione outras aeronaves facilmente neste dicionário
    }

class CustomPDF(FPDF):
    """Classe customizada para PDF com rodapé personalizado."""
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        text = (
            "This document is for reference only. "
            f"Generated by {WEBSITE_LINK}"
        )
        self.cell(0, 5, ascii_safe(text), align='C')

def calculate_moment(weight, arm):
    """Calcula o momento para um dado peso e braço."""
    return weight * arm

def validate_inputs(ac, empty_weight, pax_weight, baggage, fuel_weight):
    """Validação centralizada das entradas e limites operacionais."""
    errors = []
    warnings = []
    if empty_weight <= 0:
        errors.append("Empty Weight precisa ser informado corretamente.")
    if pax_weight < 0 or pax_weight > ac['max_passenger_weight']:
        errors.append("Peso dos ocupantes inválido.")
    if baggage < 0 or baggage > ac['max_baggage_weight']:
        warnings.append("Baggage weight fora do limite recomendado.")
    total_weight = empty_weight + pax_weight + baggage + fuel_weight
    if total_weight > ac['max_takeoff_weight']:
        errors.append("Peso total excede o MTOW da aeronave.")
    return errors, warnings

def get_pdf_report(pdf_data, filename="MBS_report.pdf"):
    """Gera arquivo PDF em buffer para download."""
    buffer = io.BytesIO()
    pdf_data.output(buffer)
    buffer.seek(0)
    return buffer

# ========== INTERFACE ==========

def main():
    st.set_page_config(
        page_title="Mass & Balance Planner",
        page_icon="✈️",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("✈️ Mass & Balance Planner")
    st.markdown("Planeje o peso e balanceamento de sua aeronave de forma fácil e confiável.")
    st.markdown("---")
    
    # ===== SIDEBAR =====
    st.sidebar.header("Configuração da Aeronave")
    aircraft_data = load_aircraft_data()
    aircraft_list = list(aircraft_data.keys())
    selected_ac = st.sidebar.selectbox("Selecione a Aeronave", aircraft_list)
    ac = aircraft_data[selected_ac]
    
    st.sidebar.markdown("**Limites Operacionais**")
    limits = (
        f"• **MTOW:** {ac['max_takeoff_weight']} {ac['units']['weight']}\n"
        f"• **Max Fuel:** {ac['max_fuel_volume']} L\n"
        f"• **Max Pax:** {ac['max_passenger_weight']} {ac['units']['weight']}\n"
        f"• **Max Baggage:** {ac['max_baggage_weight']} {ac['units']['weight']}\n"
        f"• **CG:** {ac['cg_limits'][0]:.3f}–{ac['cg_limits'][1]:.3f} {ac['units']['arm']}"
    )
    st.sidebar.info(limits)
    
    st.sidebar.header("Entradas de Peso")
    fuel_mode = st.sidebar.radio(
        "Modo de Combustível", ["Auto (máx. possível)", "Manual"], index=0
    )
    empty_weight = st.sidebar.number_input(
        "Empty Weight (kg)", min_value=0.0, value=0.0, step=0.1,
        help="Peso vazio da aeronave, incluindo equipamentos fixos e óleo."
    )
    empty_moment = st.sidebar.number_input(
        "Empty Moment (kg·m)", min_value=0.0, value=0.0, step=0.1,
        help="Momento vazio da aeronave (peso x braço, geralmente fornecido pelo fabricante)."
    )
    pax_weight = st.sidebar.number_input(
        "Pilot + Passageiro(s) (kg)", min_value=0.0, value=0.0, step=0.1,
        help="Peso combinado do piloto e passageiros."
    )
    baggage = st.sidebar.number_input(
        "Baggage (kg)", min_value=0.0, value=0.0, step=0.1,
        help="Peso total da bagagem embarcada."
    )
    
    if fuel_mode == "Manual":
        fuel_vol = st.sidebar.number_input(
            "Fuel Volume (L)", min_value=0.0, max_value=ac['max_fuel_volume'],
            value=0.0, step=0.1,
            help="Volume real de combustível embarcado, em litros."
        )
        fuel_weight = fuel_vol * ac['fuel_density']
    else:
        # Cálculo automático do máximo possível sem exceder MTOW
        remaining = ac['max_takeoff_weight'] - (empty_weight + pax_weight + baggage)
        max_fuel_weight = ac['max_fuel_volume'] * ac['fuel_density']
        fuel_weight = min(max(0, remaining), max_fuel_weight)
        fuel_vol = fuel_weight / ac['fuel_density']
    
    # ===== CÁLCULOS =====
    empty_arm = (empty_moment / empty_weight) if empty_weight else 0
    moments = {
        'Empty': empty_moment,
        'Pax': calculate_moment(pax_weight, ac['pilot_arm']),
        'Baggage': calculate_moment(baggage, ac['baggage_arm']),
        'Fuel': calculate_moment(fuel_weight, ac['fuel_arm'])
    }
    total_weight = empty_weight + pax_weight + baggage + fuel_weight
    total_moment = sum(moments.values())
    cg = (total_moment / total_weight) if total_weight else 0
    
    # ===== VALIDAÇÃO E ALERTAS =====
    errors, warnings = validate_inputs(ac, empty_weight, pax_weight, baggage, fuel_weight)
    mn, mx = ac['cg_limits']
    
    st.subheader("Resumo de Cálculo")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Peso Total (kg)", f"{total_weight:,.1f}")
    col2.metric("Centro de Gravidade (m)", f"{cg:.3f}")
    col3.metric("Combustível (L)", f"{fuel_vol:,.1f}")
    col4.metric("Peso Combustível (kg)", f"{fuel_weight:,.1f}")
    
    # Alertas
    for err in errors:
        st.error(f"❌ {err}")
    for warn in warnings:
        st.warning(f"⚠️ {warn}")
    if not (mn <= cg <= mx):
        st.error("❌ Centro de gravidade fora do envelope permitido!")
    elif cg < mn + (mx-mn)*0.05 or cg > mx - (mx-mn)*0.05:
        st.warning("⚠️ CG próximo ao limite permitido. Atenção na operação.")
    
    # ===== TABELA DETALHADA =====
    st.subheader("Detalhamento: Mass & Balance")
    table_data = [
        {
            "Item": k,
            "Weight (kg)": (
                empty_weight if k == 'Empty' else
                pax_weight if k == 'Pax' else
                baggage if k == 'Baggage' else
                fuel_weight
            ),
            "Arm (m)": (
                empty_arm if k == 'Empty' else
                ac['pilot_arm'] if k == 'Pax' else
                ac['baggage_arm'] if k == 'Baggage' else
                ac['fuel_arm']
            ),
            "Moment (kg·m)": v
        }
        for k, v in moments.items()
    ]
    df = pd.DataFrame(table_data)
    st.table(df)
    
    # ===== GERAR RELATÓRIO PDF =====
    st.subheader("Relatório em PDF")
    with st.form("pdf_form"):
        reg = st.text_input("Matrícula da Aeronave", "CS-XXX")
        mission = st.text_input("Missão Nº", "001")
        pilot_name = st.text_input("Nome do Piloto", "")
        flight_dt = st.text_input(
            "Data/Hora do Voo (UTC)", utc_now().strftime("%Y-%m-%d %H:%M UTC")
        )
        pdf_submit = st.form_submit_button("Gerar PDF")
    
    if pdf_submit:
        if not pilot_name:
            st.warning("Por favor, informe o nome do piloto para gerar o PDF.")
        else:
            def build_pdf():
                pdf = CustomPDF()
                pdf.add_page()
                pdf.set_font("Arial", 'B', 16)
                pdf.cell(0, 10, ascii_safe(f"Mass & Balance Report - {selected_ac}"), ln=True)
                pdf.ln(2)
                # Dados gerais
                for label, value in [
                    ("Matrícula", reg),
                    ("Missão", mission),
                    ("Data/Hora (UTC)", flight_dt),
                    ("Responsável", pilot_name)
                ]:
                    pdf.set_font("Arial", '', 12)
                    pdf.cell(0, 8, f"{label}: {ascii_safe(value)}", ln=True)
                pdf.ln(2)
                # Tabela de massas
                pdf.set_font("Arial", 'B', 12)
                headers = ["Item", "Peso (kg)", "Braço (m)", "Momento (kg·m)"]
                w = [40, 40, 40, 70]
                for h, wi in zip(headers, w):
                    pdf.cell(wi, 8, h, border=1)
                pdf.ln()
                pdf.set_font("Arial", '', 12)
                for row in table_data:
                    pdf.cell(40, 8, ascii_safe(row['Item']), border=1)
                    pdf.cell(40, 8, f"{row['Weight (kg)']:.1f}", border=1, align='R')
                    pdf.cell(40, 8, f"{row['Arm (m)']:.3f}", border=1, align='R')
                    pdf.cell(70, 8, f"{row['Moment (kg·m)']:.1f}", border=1, align='R')
                    pdf.ln()
                pdf.ln(4)
                pdf.set_font("Arial", 'B', 12)
                pdf.cell(0, 8, f"Peso Total: {total_weight:.1f} kg", ln=True)
                pdf.cell(0, 8, f"CG: {cg:.3f} m", ln=True)
                return pdf
            
            pdf_report = build_pdf()
            buffer = get_pdf_report(pdf_report, filename=f"MBS_report_{mission}.pdf")
            st.download_button(
                label="📄 Baixar PDF",
                data=buffer,
                file_name=f"MBS_report_{mission}.pdf",
                mime="application/pdf"
            )
            st.success("PDF pronto para download!")
    
    st.markdown("---")
    st.caption("Site por Alexandre Moiteiro. © 2025 Todos os direitos reservados.")

if __name__ == "__main__":
    main()

