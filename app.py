import streamlit as st
from fpdf import FPDF
import datetime
from pathlib import Path
import pytz
import requests
import base64
import json
import unicodedata

# ---- CONFIGURATION ----
ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets["SENDGRID_API_KEY"]

def ascii_safe(text):
    return unicodedata.normalize('NFKD', str(text)).encode('ascii', 'ignore').decode('ascii')

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        self.multi_cell(0, 2.8, ascii_safe(
            "This document is for assistance only. Verify your own calcs.\n"
            f"Generated by {WEBSITE_LINK}"
        ), align='C')
        self.set_text_color(0,0,0)

st.set_page_config(page_title="Mass & Balance", page_icon="üõ©Ô∏è", layout="wide")

# ---> Inject custom styling
st.markdown("""
<style>
.navbar { background-color: #123E70; padding: 12px; color: white; font-size: 1.6rem; text-align: center; }
.tab-header { font-size:1.2rem; color:#123E70; margin-bottom:8px; }
.summary-box { background:#fefefe; padding:1em; border:1px solid #ddd; border-radius:8px; margin-bottom:20px; }
.mass-table { border-collapse: collapse; width:100%; margin-bottom:20px; }
.mass-table th, .mass-table td { border:1px solid #ddd; padding:8px; text-align:center; }
.mass-table th { background:#f4f6f8; color:#123E70; }
footer { font-size:0.85rem; color:#666; text-align:center; margin:30px 0 15px; }
.contact-expander { max-width:480px; margin:0 auto; }
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="navbar">üõ©Ô∏è Mass & Balance Planner</div>', unsafe_allow_html=True)

tabs = st.tabs(["‚úèÔ∏è Input", "üìä Summary", "üìÑ PDF & Contact"])
tab_input, tab_summary, tab_pdf = tabs

# -- Data & Defaults
aircraft_data = {
    "Tecnam P2008": {
        "fuel_arm": 2.209, "pilot_arm": 1.800, "baggage_arm": 2.417,
        "max_takeoff_weight": 650, "max_fuel_volume": 124.0,
        "max_passenger_weight": 230, "max_baggage_weight": 20,
        "cg_limits": (1.841, 1.978), "fuel_density": 0.72,
        "units": {"weight": "kg", "arm": "m"}
    }
}
icons = {"Tecnam P2008": "tecnam_icon.png"}
afm_files = {"Tecnam P2008": "Tecnam_P2008_AFM.pdf"}

def get_limits_text(ac):
    u = ac["units"]
    lines = [
        f"Max Takeoff Weight: {ac['max_takeoff_weight']} {u['weight']}",
        f"Max Fuel Volume: {ac['max_fuel_volume']} L"
    ]
    lines += [
        f"Max Pilot+Passenger: {ac['max_passenger_weight']} {u['weight']}",
        f"Max Baggage: {ac['max_baggage_weight']} {u['weight']}",
        f"CG Limits: {ac['cg_limits'][0]} to {ac['cg_limits'][1]} {u['arm']}"
    ]
    return "\n".join(lines)

def calc_all(ew, ew_moment, pilot, bag1, fuel_mode, fuel_vol, ac):
    ew_arm = ew_moment / ew if ew else 0
    units = ac["units"]
    # fuel
    if fuel_mode == 0:
        useful = ac["max_takeoff_weight"] - (ew + pilot + bag1)
        cap_wt = ac["max_fuel_volume"] * ac["fuel_density"]
        if useful <= cap_wt:
            fw = useful; fv = fw / ac["fuel_density"]; mode = "Weight-limited"
        else:
            fw = cap_wt; fv = ac["max_fuel_volume"]; mode = "Tank capacity"
    else:
        fw = fuel_vol * ac["fuel_density"]; fv = fuel_vol; mode = "Manual"
    # moments
    m_empty = ew * ew_arm
    m_pilot = pilot * ac["pilot_arm"]
    m_bag = bag1 * ac["baggage_arm"]
    m_fuel = fw * ac["fuel_arm"]
    total_w = ew + pilot + bag1 + fw
    total_m = m_empty + m_pilot + m_bag + m_fuel
    cg = total_m / total_w if total_w else 0
    alerts = []
    if total_w > ac["max_takeoff_weight"]: alerts.append("Total weight exceeds MTOW.")
    if bag1 > ac["max_baggage_weight"]: alerts.append("Baggage limit exceeded.")
    if pilot > ac["max_passenger_weight"]: alerts.append("Pilot+passenger exceed limit.")
    mn, mx = ac["cg_limits"]
    if not (mn <= cg <= mx): alerts.append("CG out of safe envelope.")
    return dict(
        ew_arm=ew_arm, fw=fw, fv=fv, mode=mode,
        total_w=total_w, total_m=total_m, cg=cg,
        m_empty=m_empty, m_pilot=m_pilot, m_bag=m_bag, m_fuel=m_fuel,
        alerts=alerts
    )

# --- INPUT tab
with tab_input:
    ac_option = st.selectbox("Select Aircraft", list(aircraft_data.keys()))
    ac = aircraft_data[ac_option]
    if icons.get(ac_option) and Path(icons[ac_option]).exists():
        st.image(icons[ac_option], width=150)
    if afm_files.get(ac_option) and Path(afm_files[ac_option]).exists():
        with open(afm_files[ac_option],"rb") as f:
            st.download_button("Download AFM", f, file_name=afm_files[ac_option], mime="application/pdf")
    st.markdown('---')
    st.header("Enter Mass & Dimensions")
    ew = st.number_input("Empty Weight", 0.0, step=1.0, format="%.2f", help="From aircraft weight & balance sheet")
    ew_moment = st.number_input("Empty Weight Moment", 0.0, step=1.0, format="%.2f")
    pilot = st.number_input("Pilot & Passenger Weight", 0.0, step=1.0, format="%.2f")
    bag1 = st.number_input("Baggage Weight", 0.0, step=1.0, format="%.2f")
    fmode = st.radio("Fuel Input Mode", ["Auto max fuel", "Manual volume"], index=0)
    fuel_vol = 0.0
    if fmode == "Manual volume":
        fuel_vol = st.number_input("Fuel Volume (L)", value=0.0, step=1.0, format="%.2f")

# --- SUMMARY tab
with tab_summary:
    st.markdown('<div class="tab-header">Summary & Balance Table</div>', unsafe_allow_html=True)
    result = calc_all(ew, ew_moment, pilot, bag1, 0 if fmode.startswith("Auto") else 1, fuel_vol, ac)
    if result["alerts"]:
        for msg in result["alerts"]:
            st.error(msg)
    else:
        st.success("All parameters within limits.")
    st.markdown('<div class="summary-box">', unsafe_allow_html=True)
    st.markdown(f"""
      **Fuel**: {result['fv']:.1f}‚ÄØL / {result['fw']:.1f}‚ÄØ{ac['units']["weight"]} ({result["mode"]})  
      **Total Weight**: {result['total_w']:.2f}‚ÄØ{ac['units']["weight"]}  
      **Center of Gravity** (arm): {result['cg']:.3f}‚ÄØ{ac['units']["arm"]}  
      CG Limits: {ac['cg_limits'][0]:.3f} ‚Äî {ac['cg_limits'][1]:.3f}
    """, unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    # Table
    st.markdown('<table class="mass-table"><tr><th>Item</th><th>Weight</th><th>Arm</th><th>Moment</th></tr>'
                f'<tr><td>Empty Weight</td><td>{ew:.2f}</td><td>{result["ew_arm"]:.3f}</td><td>{result["m_empty"]:.2f}</td></tr>'
                f'<tr><td>Pilot+Passenger</td><td>{pilot:.2f}</td><td>{ac["pilot_arm"]:.3f}</td><td>{result["m_pilot"]:.2f}</td></tr>'
                f'<tr><td>Baggage</td><td>{bag1:.2f}</td><td>{ac["baggage_arm"]:.3f}</td><td>{result["m_bag"]:.2f}</td></tr>'
                f'<tr><td>Fuel</td><td>{result["fw"]:.2f}</td><td>{ac["fuel_arm"]:.3f}</td><td>{result["m_fuel"]:.2f}</td></tr>'
                '</table>', unsafe_allow_html=True)

# --- PDF & Contact tab
with tab_pdf:
    st.markdown('<div class="tab-header">PDF Report & Contact</div>', unsafe_allow_html=True)
    pilot_name = st.text_input("Pilot Name *")
    registration = st.text_input("Aircraft Registration", "CS‚ÄëXXX")
    mission_number = st.text_input("Mission Number", "001")
    flight_dt = st.text_input("Flight Date/Time (UTC)", datetime.datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M UTC"))
    gen = st.button("Generate PDF")
    if gen and pilot_name:
        pdf = generate_pdf(
            ac_option, registration, mission_number, flight_dt, pilot_name,
            ew, result["ew_arm"], ew_moment, pilot, bag1, 0, result["fw"], result["fv"],
            result["m_empty"], result["m_pilot"], result["m_bag"], result["m_fuel"],
            result["total_w"], result["total_m"], result["cg"], ac, result["mode"], result["alerts"], bag1
        )
        pdf_file = f"MB_report_{mission_number}.pdf"
        pdf.output(pdf_file)
        with open(pdf_file,"rb") as f:
            st.download_button("Download PDF", f, file_name=pdf_file, mime="application/pdf")
        st.success("PDF generated!")
        try:
            email_pdf_to_admin(pdf_file, f"MB ‚Äì {pilot_name}", pilot_name, registration, mission_number, flight_dt, ac_option)
        except Exception:
            st.warning("Warning: Email to admin failed.")
    else:
        st.info("Please enter Pilot Name to enable PDF generation.")
    st.markdown('---')
    with st.expander("Contact / Suggestion", expanded=False):
        st.markdown('<div class="contact-expander">', unsafe_allow_html=True)
        cname = st.text_input("Your Name")
        cemail = st.text_input("Your Email (optional)")
        cmsg = st.text_area("Message", max_chars=900)
        if st.button("Send Message"):
            if not cmsg.strip():
                st.warning("Message cannot be empty.")
            else:
                send_suggestion_email(cname, cemail, cmsg)
                st.success("Thank you! Message sent.")
        st.markdown('</div>', unsafe_allow_html=True)

# --- footer
st.markdown('<footer>¬© Alexandre Moiteiro. All rights reserved.</footer>', unsafe_allow_html=True)


