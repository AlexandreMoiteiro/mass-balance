import streamlit as st
from fpdf import FPDF
import datetime
import pytz
from pathlib import Path
from io import BytesIO
import unicodedata

# --- CONFIG & CONSTANTS ---
ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets.get("SENDGRID_API_KEY", "")

# --- UTILS ---
def ascii_safe(text):
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        footer_text = (
            "This document is for assistance and cross-checking only. "
            "It does not replace your responsibility to perform and verify your own calculations before flight.\n  "
            f"Generated by {WEBSITE_LINK}"
        )
        self.multi_cell(0, 2.8, ascii_safe(footer_text), align='C')
        self.set_text_color(0,0,0)

# --- CSS IMPROVEMENTS ---
st.markdown("""
    <style>
    body, html, [class*="css"] {
        font-family: 'Segoe UI', Arial, sans-serif;
        background: #f7fafd !important;
        color: #181c22 !important;
    }
    .main, .block-container {
        background: #f7fafd !important;
        padding-top: 20px !important;
        max-width: 1100px !important;
        margin: auto !important;
    }
    .easa-header {
        font-size: 1.4rem; font-weight: 700;
        letter-spacing: .01em;
        color: #174c85;
        border-bottom: 1.5px solid #e2e7ec;
        margin-bottom: 18px;
        padding-bottom: 9px;
        border-radius: 8px 8px 0 0;
        background: #f1f6fa !important;
        box-shadow: 0 2px 8px #0001;
    }
    .easa-card {
        background: #fff;
        border: 1.2px solid #e4e7ee;
        padding: 25px 30px 15px 30px;
        border-radius: 18px;
        box-shadow: 0 2px 10px #0002;
        margin-bottom: 28px;
        min-height: 250px;
    }
    .easa-table {
        border-collapse: collapse;
        width: 100%;
        background: #f9fafb;
        font-size: 1.01rem;
        border: 1px solid #e4e7ee;
        margin-top: 8px;
    }
    .easa-table th, .easa-table td {
        padding: 7px 10px;
        border-bottom: 1px solid #e6e7ec;
        border-right: 1px solid #e6e7ec;
        text-align: center;
    }
    .easa-table th {
        color: #2357a8;
        background: #f0f4fa;
        font-weight: 700;
    }
    .easa-table tr:last-child td { border-bottom: none; }
    .easa-table td:last-child, .easa-table th:last-child { border-right:none;}
    .easa-summary-row {
        display: flex; align-items: baseline; justify-content: space-between;
        margin: 6px 0 2px 0;
    }
    .ok { color: #14a64e; font-weight: 600; }
    .warn { color: #f9a620; font-weight: 600; }
    .bad { color: #c21c1c; font-weight: 600; }
    .easa-alert {
        background: #fff5f5;
        border-left: 6px solid #d93b3b;
        color: #d93b3b;
        font-weight: 700;
        font-size: 1.06rem;
        padding: 10px 17px;
        margin-bottom: 13px;
        margin-top: 9px;
        border-radius: 9px;
        box-shadow: 0 1px 6px #d93b3b11;
    }
    .footer {
        margin-top:32px;font-size:1rem;color:#8d96ab;text-align:center;
    }
    .stDownloadButton {margin-top: 11px;}
    .easa-contact-panel {margin:30px auto 0 auto; max-width:370px; background:#f8fafd;padding:18px 20px 8px 20px; border:1px solid #e5e7ec; border-radius:12px;}
    </style>
""", unsafe_allow_html=True)

# --- AIRCRAFT DATA ---
aircraft_data = {
    "Tecnam P2008": {
        "icon": "https://static.wixstatic.com/media/1424b0_7fc1d3d5b3574efcb9eebf6e49f09e42~mv2.png/v1/fit/w_210,h_56,al_c,q_80/file.png",
        "fuel_arm": 2.209,
        "pilot_arm": 1.800,
        "baggage_arm": 2.417,
        "max_takeoff_weight": 650,
        "max_fuel_volume": 124.0,
        "max_passenger_weight": 230,
        "max_baggage_weight": 20,
        "cg_limits": (1.841, 1.978),
        "fuel_density": 0.72,
        "units": {"weight": "kg", "arm": "m"}
    }
}
afm_files = {"Tecnam P2008": "Tecnam_P2008_AFM.pdf"}

# --- HEADER ---
st.markdown('<div class="easa-header">Mass & Balance Calculation Tool</div>', unsafe_allow_html=True)

# --- PAGE LAYOUT ---
cols = st.columns([0.45, 0.1, 0.45], gap="large")
# --- LEFT COLUMN: AIRCRAFT & INPUT ---
with cols[0]:
    st.markdown('<div class="easa-card">', unsafe_allow_html=True)
    st.markdown("#### Aircraft Selection")
    aircraft = st.selectbox(
        "Aircraft type",
        list(aircraft_data.keys()),
        index=0,
        help="Currently only Tecnam P2008 available."
    )
    ac = aircraft_data[aircraft]
    st.image(ac["icon"], output_format="auto", use_column_width="always")
    afm_path = afm_files.get(aircraft)
    if afm_path and Path(afm_path).exists():
        with open(afm_path, "rb") as f:
            st.download_button("AFM Document", f, file_name=afm_path, mime="application/pdf")
    else:
        st.info("AFM document not available.")

    # --- Input Card ---
    st.markdown("#### Input Masses")
    with st.form("input_form"):
        ew = st.number_input("Empty Weight", min_value=100.0, value=395.0, step=1.0, help="Aircraft empty weight, see aircraft docs.")
        ew_moment = st.number_input("Empty Weight Moment", min_value=500.0, value=756.0, step=1.0, help="Moment for empty weight, see docs.")
        pilot = st.number_input("Pilot & Passenger", min_value=0.0, max_value=ac['max_passenger_weight'], value=78.0, step=1.0)
        bag1 = st.number_input("Baggage", min_value=0.0, max_value=ac['max_baggage_weight'], value=6.0, step=1.0)
        fuel_mode = st.radio(
            "Fuel Input Mode",
            ["Auto max fuel", "Manual fuel"],
            index=0,
            help="Auto: maximize fuel given weight limits. Manual: enter volume."
        )
        fuel_vol = ac['max_fuel_volume']
        fuel_weight = fuel_vol * ac['fuel_density']
        if fuel_mode == "Manual fuel":
            fuel_vol = st.number_input("Fuel Volume (L)", min_value=0.0, max_value=ac['max_fuel_volume'], value=35.0, step=1.0)
            fuel_weight = fuel_vol * ac['fuel_density']
        st.form_submit_button("Update Values")
    st.markdown('</div>', unsafe_allow_html=True)

# --- CALCULATION ---
fuel_density = ac['fuel_density']
units_wt = ac['units']['weight']
units_arm = ac['units']['arm']

# --- Compute masses & moments
ew_arm = ew_moment / ew if ew > 0 else 0.0
bag2 = 0.0
m_empty = ew_moment
m_pilot = pilot * ac['pilot_arm']
m_bag1 = bag1 * ac['baggage_arm']
m_bag2 = 0.0
m_fuel = fuel_weight * ac['fuel_arm']

total_weight = ew + pilot + bag1 + bag2 + fuel_weight
total_moment = m_empty + m_pilot + m_bag1 + m_bag2 + m_fuel
cg = (total_moment / total_weight) if total_weight > 0 else 0
baggage_sum = bag1 + bag2

def get_color(val, limit):
    if limit is None: return "ok"
    if val > limit: return "bad"
    elif val > (limit * 0.95): return "warn"
    else: return "ok"

def get_cg_color(cg, limits):
    if not limits: return "ok"
    mn, mx = limits
    margin = (mx - mn) * 0.05
    if cg < mn or cg > mx:
        return "bad"
    elif cg < mn + margin or cg > mx - margin:
        return "warn"
    else:
        return "ok"

alert_list = []
if total_weight > ac['max_takeoff_weight']:
    alert_list.append("❌ Total weight exceeds maximum takeoff weight.")
if bag1 > ac['max_baggage_weight']:
    alert_list.append("❌ Baggage exceeds limit.")
if ac.get("max_passenger_weight") and pilot > ac["max_passenger_weight"]:
    alert_list.append("❌ Pilot & Passenger exceed limit.")
if ac['cg_limits']:
    mn, mx = ac['cg_limits']
    if cg < mn or cg > mx:
        alert_list.append("❌ CG outside safe envelope.")

# --- RIGHT COLUMN: SUMMARY & PDF ---
with cols[2]:
    st.markdown('<div class="easa-card">', unsafe_allow_html=True)
    st.markdown('#### Calculation Summary')
    def summary_row(label, value, color="ok"):
        return f'<div class="easa-summary-row"><span>{label}</span><span class="{color}">{value}</span></div>'
    st.markdown(summary_row("Fuel", f"{fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt}"), unsafe_allow_html=True)
    st.markdown(summary_row("Total Weight", f"{total_weight:.2f} {units_wt}", get_color(total_weight, ac["max_takeoff_weight"])), unsafe_allow_html=True)
    st.markdown(summary_row("Total Moment", f"{total_moment:.2f} {units_wt}·{units_arm}"), unsafe_allow_html=True)
    st.markdown(summary_row("CG", f"{cg:.3f} {units_arm}", get_cg_color(cg, ac["cg_limits"])), unsafe_allow_html=True)
    st.markdown(summary_row("CG Limits", f"{ac['cg_limits'][0]:.3f} to {ac['cg_limits'][1]:.3f} {units_arm}"), unsafe_allow_html=True)
    if alert_list:
        for alert in alert_list:
            st.markdown(f'<div class="easa-alert">{alert}</div>', unsafe_allow_html=True)
    # --- Table ---
    st.markdown('#### Mass & Balance Table')
    items = [
        ("Empty Weight", ew, ew_arm, m_empty),
        ("Pilot & Passenger", pilot, ac['pilot_arm'], m_pilot),
        ("Baggage", bag1, ac['baggage_arm'], m_bag1),
        ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
    ]
    def mb_table(items, units_wt, units_arm):
        table = '<table class="easa-table">'
        table += (
            "<tr>"
            "<th>Item</th>"
            f"<th>Weight<br>({units_wt})</th>"
            f"<th>Arm<br>({units_arm})</th>"
            f"<th>Moment<br>({units_wt}·{units_arm})</th>"
            "</tr>"
        )
        for i in items:
            table += f"<tr><td>{i[0]}</td><td>{i[1]:.2f}</td><td>{i[2]:.3f}</td><td>{i[3]:.2f}</td></tr>"
        table += "</table>"
        return table
    st.markdown(mb_table(items, units_wt, units_arm), unsafe_allow_html=True)
    # --- PDF GENERATION ---
    st.markdown('#### PDF Report')
    with st.expander("Generate PDF report", expanded=False):
        pilot_name = st.text_input('Pilot name / Prepared by *', value="")
        registration = st.text_input("Aircraft registration", value="CS-XXX")
        mission_number = st.text_input("Mission number", value="001")
        default_datetime = datetime.datetime.now(pytz.UTC).strftime("%Y-%m-%d %H:%M UTC")
        flight_datetime_utc = st.text_input("Scheduled flight date and time (UTC)", value=default_datetime)
        pilot_name_valid = bool(pilot_name.strip())
        pdf_button = st.button("Generate PDF with current values", disabled=not pilot_name_valid)
        if pdf_button and pilot_name_valid:
            pdf = CustomPDF()
            pdf.set_auto_page_break(auto=True, margin=10)
            pdf.add_page()
            pdf.set_fill_color(34,34,34)
            pdf.rect(0, 0, 210, 15, 'F')
            pdf.set_font("Arial", 'B', 15)
            pdf.set_text_color(255,255,255)
            pdf.set_xy(10,7)
            pdf.cell(0, 7, ascii_safe("MASS & BALANCE REPORT"), ln=True, align='L')
            pdf.set_text_color(0,0,0)
            pdf.set_xy(10,20)
            pdf.ln(3)
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 7, ascii_safe(f"{aircraft}  |  {registration}"), ln=True)
            pdf.set_font("Arial", '', 11)
            pdf.cell(0, 6, ascii_safe(f"Mission Number: {mission_number}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Flight (UTC): {flight_datetime_utc}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Prepared by: {pilot_name}"), ln=True)
            pdf.cell(0, 6, ascii_safe("Operator: Sevenair Academy"), ln=True)
            pdf.ln(2)
            pdf.set_font("Arial", 'B', 10)
            pdf.cell(0, 6, ascii_safe("Operational Limits:"), ln=True)
            pdf.set_font("Arial", '', 9)
            for line in [
                f"Max Takeoff Weight: {ac['max_takeoff_weight']} {units_wt}",
                f"Max Fuel Volume: {ac['max_fuel_volume']} L",
                f"Max Pilot+Passenger: {ac['max_passenger_weight']} {units_wt}",
                f"Max Baggage: {ac['max_baggage_weight']} {units_wt}",
                f"CG Limits: {ac['cg_limits'][0]} to {ac['cg_limits'][1]} {units_arm}",
            ]:
                pdf.cell(0, 5, ascii_safe(line), ln=True)
            pdf.ln(1)
            pdf.set_font("Arial", 'B', 10)
            col_widths = [45, 36, 34, 55]
            headers = ["Item", f"Weight ({units_wt})", f"Arm ({units_arm})", f"Moment ({units_wt}·{units_arm})"]
            for h, w in zip(headers, col_widths):
                pdf.cell(w, 7, ascii_safe(h), border=1, align='C')
            pdf.ln()
            pdf.set_font("Arial", '', 9)
            for row in items:
                for val, w in zip(row, col_widths):
                    if isinstance(val, str):
                        pdf.cell(w, 7, ascii_safe(val), border=1)
                    else:
                        pdf.cell(w, 7, ascii_safe(f"{val:.2f}" if isinstance(val, float) else str(val)), border=1, align='C')
                pdf.ln()
            pdf.ln(1)
            pdf.set_font("Arial", 'B', 10)
            pdf.set_text_color(50,50,50)
            fuel_str = f"Fuel: {fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt}"
            pdf.cell(0, 6, ascii_safe(fuel_str), ln=True)
            pdf.set_text_color(0,0,0)
            pdf.cell(0, 6, ascii_safe(f"Total Weight: {total_weight:.2f} {units_wt}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Total Moment: {total_moment:.2f} {units_wt}·{units_arm}"), ln=True)
            if ac['cg_limits']:
                pdf.cell(0, 6, ascii_safe(f"CG: {cg:.3f} {units_arm}"), ln=True)
            if alert_list:
                pdf.set_font("Arial", 'B', 9)
                pdf.set_text_color(200,0,0)
                for a in alert_list:
                    pdf.cell(0, 6, ascii_safe(f"WARNING: {a}"), ln=True)
                pdf.set_text_color(0,0,0)
            # --- SAVE PDF TO MEMORY ---
            buffer = BytesIO()
            pdf.output(buffer)
            buffer.seek(0)
            st.download_button("Download PDF", buffer, file_name=f"mass_balance_mission{mission_number}.pdf", mime="application/pdf")
            st.success("PDF generated successfully!")
    st.markdown('</div>', unsafe_allow_html=True)

# --- FOOTER & CONTACT ---
st.markdown('<div class="footer">Site developed by Alexandre Moiteiro. All rights reserved. | EASA mass & balance tool concept</div>', unsafe_allow_html=True)
with st.expander("Contact / Suggestion / Bug", expanded=False):
    st.markdown('<div class="easa-contact-panel">If you want to send a suggestion, report a bug, or contact the site administrator, fill in below:</div>', unsafe_allow_html=True)
    sug_name = st.text_input("Your name", value="", key="sug_nome_footer")
    sug_email = st.text_input("Your email (optional)", value="", key="sug_email_footer")
    sug_msg = st.text_area("Message", height=70, max_chars=900, key="sug_msg_footer")
    sug_send = st.button("Send message", key="sug_btn_footer")
    if sug_send:
        if not sug_msg.strip():
            st.warning("Please write your message before sending.")
        else:
            # This would send email if properly configured, but suppressed here for safety.
            st.success("Message sent successfully. Thank you for your feedback.")



