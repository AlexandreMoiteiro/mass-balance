import streamlit as st
from fpdf import FPDF
import datetime
from pathlib import Path
import pytz
import requests
import base64
import json
import unicodedata

# ---- CONFIGURATION ----
ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets["SENDGRID_API_KEY"]

# ---- UTILITY FUNCTIONS ----
def ascii_safe(text):
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        text = (
            "This document is for reference only."
            f" Generated by {WEBSITE_LINK}"
        )
        self.cell(0, 5, ascii_safe(text), align='C')

@st.cache_resource
def load_aircraft_data():
    return {
        "Tecnam P2008": {
            "fuel_arm": 2.209,
            "pilot_arm": 1.800,
            "baggage_arm": 2.417,
            "max_takeoff_weight": 650,
            "max_fuel_volume": 124.0,
            "max_passenger_weight": 230,
            "max_baggage_weight": 20,
            "cg_limits": (1.841, 1.978),
            "fuel_density": 0.72,
            "units": {"weight": "kg", "arm": "m"}
        }
    }

# ---- PAGE SETUP ----
st.set_page_config(
    page_title="Mass & Balance Planner",
    page_icon="✈️",
    layout="wide",
    initial_sidebar_state="expanded"
)

def utc_now():
    return datetime.datetime.now(pytz.UTC)

# ---- SIDEBAR INPUTS ----
st.sidebar.header("Aircraft Setup")
aircraft_data = load_aircraft_data()
aircraft_list = list(aircraft_data.keys())
selected_ac = st.sidebar.selectbox("Select Aircraft", aircraft_list)
ac = aircraft_data[selected_ac]

st.sidebar.markdown("**Operational Limits**")
limits = (
    f"• MTOW: {ac['max_takeoff_weight']} {ac['units']['weight']}\n"
    f"• Max Fuel: {ac['max_fuel_volume']} L\n"
    f"• Max Pax: {ac['max_passenger_weight']} {ac['units']['weight']}\n"
    f"• Max Baggage: {ac['max_baggage_weight']} {ac['units']['weight']}\n"
    f"• CG: {ac['cg_limits'][0]}–{ac['cg_limits'][1]} {ac['units']['arm']}"
)
st.sidebar.info(limits)

# Inputs
st.sidebar.header("Load Inputs")
fuel_mode = st.sidebar.radio(
    "Fuel Mode", ["Auto Max Fuel", "Manual Fuel"], index=0
)
empty_weight = st.sidebar.number_input("Empty Weight (kg)", min_value=0.0, value=0.0, step=0.1)
empty_moment = st.sidebar.number_input("Empty Moment (kg·m)", min_value=0.0, value=0.0, step=0.1)
pax_weight = st.sidebar.number_input("Pilot + Pax (kg)", min_value=0.0, value=0.0, step=0.1)
baggage = st.sidebar.number_input("Baggage (kg)", min_value=0.0, value=0.0, step=0.1)

if fuel_mode == "Manual Fuel":
    fuel_vol = st.sidebar.number_input("Fuel Volume (L)", min_value=0.0, value=0.0, step=0.1)
    fuel_weight = fuel_vol * ac['fuel_density']
else:
    # auto-calc
    remaining = ac['max_takeoff_weight'] - (empty_weight + pax_weight + baggage)
    max_fuel_weight = ac['max_fuel_volume'] * ac['fuel_density']
    fuel_weight = min(max(0, remaining), max_fuel_weight)
    fuel_vol = fuel_weight / ac['fuel_density']

# ---- COMPUTATIONS ----
empty_arm = (empty_moment / empty_weight) if empty_weight else 0
moments = {
    'Empty': empty_moment,
    'Pax': pax_weight * ac['pilot_arm'],
    'Baggage': baggage * ac['baggage_arm'],
    'Fuel': fuel_weight * ac['fuel_arm']
}
total_weight = empty_weight + pax_weight + baggage + fuel_weight
total_moment = sum(moments.values())
cg = (total_moment / total_weight) if total_weight else 0

# ---- MAIN CONTENT ----
st.title("Mass & Balance Planner")
st.markdown("---")

# Summary metrics
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Weight (kg)", f"{total_weight:,.1f}")
col2.metric("Center of Gravity (m)", f"{cg:.3f}")
col3.metric("Fuel Loaded (L)", f"{fuel_vol:,.1f}")
col4.metric("Fuel Weight (kg)", f"{fuel_weight:,.1f}")

# Alerts
if total_weight > ac['max_takeoff_weight']:
    st.error("⚠️ Total weight exceeds MTOW!")
if baggage > ac['max_baggage_weight']:
    st.warning("⚠️ Baggage exceeds limit!")
mn, mx = ac['cg_limits']
if not (mn <= cg <= mx):
    st.error("⚠️ CG outside allowable envelope!")
elif cg < mn + (mx-mn)*0.05 or cg > mx - (mx-mn)*0.05:
    st.warning("⚠️ CG near limit margin.")

# Detailed table
st.subheader("Mass & Balance Details")
from pandas import DataFrame

data = [
    {"Item": k,
     "Weight (kg)": (empty_weight if k=='Empty' else pax_weight if k=='Pax' else baggage if k=='Baggage' else fuel_weight),
     "Arm (m)": (empty_arm if k=='Empty' else ac['pilot_arm'] if k=='Pax' else ac['baggage_arm'] if k=='Baggage' else ac['fuel_arm']),
     "Moment (kg·m)": v }
    for k, v in moments.items()
]
df = DataFrame(data)
st.table(df)

# PDF Report
st.subheader("Generate PDF Report")
with st.form("pdf_form"):
    reg = st.text_input("Aircraft Registration", "CS-XXX")
    mission = st.text_input("Mission #", "001")
    pilot_name = st.text_input("Pilot Name", "")
    flight_dt = st.text_input("Flight Date/Time (UTC)", utc_now().strftime("%Y-%m-%d %H:%M UTC"))
    submitted = st.form_submit_button("Create PDF")

if submitted and pilot_name:
    def build_pdf():
        pdf = CustomPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 16)
        pdf.cell(0, 10, f"Mass & Balance Report - {selected_ac}", ln=True)
        pdf.ln(2)
        for k, v in [
            ("Reg", reg),
            ("Mission", mission),
            ("Flight UTC", flight_dt),
            ("Prepared by", pilot_name)
        ]:
            pdf.set_font("Arial", '', 12)
            pdf.cell(0, 8, f"{k}: {ascii_safe(v)}", ln=True)
        pdf.ln(2)
        # table
        pdf.set_font("Arial", 'B', 12)
        headers = ["Item", "Weight", "Arm", "Moment"]
        w = [40, 40, 40, 70]
        for h, wi in zip(headers, w): pdf.cell(wi, 8, h, border=1)
        pdf.ln()
        pdf.set_font("Arial", '', 12)
        for row in data:
            pdf.cell(40, 8, row['Item'], border=1)
            pdf.cell(40, 8, f"{row['Weight (kg)']:.1f}", border=1, align='R')
            pdf.cell(40, 8, f"{row['Arm (m)']:.3f}", border=1, align='R')
            pdf.cell(70, 8, f"{row['Moment (kg·m)']:.1f}", border=1, align='R')
            pdf.ln()
        pdf.ln(4)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 8, f"Total Weight: {total_weight:.1f} kg", ln=True)
        pdf.cell(0, 8, f"CG: {cg:.3f} m", ln=True)
        return pdf

    report = build_pdf()
    filename = f"MBS_report_{mission}.pdf"
    report.output(filename)
    with open(filename, "rb") as f:
        st.download_button("Download PDF", f, file_name=filename, mime="application/pdf")
    st.success("PDF ready for download.")

# Footer
st.markdown("---")
st.caption("Site by Alexandre Moiteiro. © 2025 All rights reserved.")

