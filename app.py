import streamlit as st
from fpdf import FPDF
import datetime
from pathlib import Path
import pytz
import requests
import base64
import json
import unicodedata

ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets["SENDGRID_API_KEY"]

def ascii_safe(text):
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        footer_text = (
            "This document is for assistance and cross-checking only. "
            "It does not replace your responsibility to perform and verify your own calculations before flight.\n  "
            f"Generated by {WEBSITE_LINK}"
        )
        self.multi_cell(0, 2.8, ascii_safe(footer_text), align='C')
        self.set_text_color(0,0,0)

st.set_page_config(
    page_title="Mass & Balance | EASA Tool",
    page_icon=None,
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- FORCE LIGHT MODE AND CLEAN UI ---
def inject_css():
    st.markdown("""
    <style>
    html, body, [class*="css"] {
        font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
        background: #f6f7fa !important;
        color: #181c22 !important;
    }
    body, .main, .block-container { background: #f6f7fa !important;}
    [data-testid="stAppViewContainer"] { background: #f6f7fa !important;}
    [data-testid="stSidebar"] { background: #fff !important;}
    ::selection {background:#d2e2fa;}
    .block-container { max-width: 1120px !important; margin: auto; padding-top:16px;}
    .main { background: #f6f7fa !important;}
    .easa-header {
        font-size: 1.27rem;
        font-weight: 800;
        letter-spacing: .02em;
        color: #1b2541;
        border-bottom: 1px solid #e5e7ec;
        margin-bottom: 0;
        padding-bottom: 7px;
        text-transform: uppercase;
        background: #f6f7fa !important;
    }
    .easa-card {
        background: #fff;
        border: 1.5px solid #e5e7ec;
        padding: 28px 32px 20px 32px;
        border-radius: 0;
        box-shadow: none;
        margin-bottom: 25px;
    }
    .easa-limits {
        font-size: 0.97rem;
        color: #292e38;
        margin-bottom: 11px;
        padding: 4px 0 5px 0;
    }
    .easa-limits ul {margin-bottom:0; margin-top:0;}
    .easa-limits li {
        margin-bottom: 0;
        font-size: 0.96rem;
        list-style-type: disc;
        margin-left: 1.2em;
    }
    .easa-aircraft-icon {
        display: block;
        margin: 7px 0 16px 0;
        height: 56px;
        width: auto;
        filter: grayscale(0.15) contrast(1.07);
    }
    .easa-table {
        border-collapse: collapse;
        width: 100%;
        background: #f9fafb;
        font-size: 0.97rem;
        margin: 0 0 10px 0;
        border: 1px solid #e5e7ec;
    }
    .easa-table th, .easa-table td {
        padding: 6px 9px;
        border-bottom: 1px solid #e6e7ec;
        border-right: 1px solid #e6e7ec;
        text-align: center;
        font-size: 0.97rem;
    }
    .easa-table th { 
        color: #17244b; 
        background: #f2f4f7; 
        font-weight: 600;
        border-top: 1px solid #e6e7ec;
        font-size: 0.95rem;
    }
    .easa-table tr:last-child td { border-bottom: none; }
    .easa-table td:last-child, .easa-table th:last-child { border-right:none;}
    .easa-table td { color: #181c22; font-weight: 500;}
    .easa-summary { font-size: 1.08rem; margin-bottom: 10px; }
    .easa-summary-row { display: flex; align-items: baseline; justify-content: space-between; margin: 4px 0;}
    .easa-summary-label { color: #232b3b; }
    .easa-summary-val { font-weight: 600; letter-spacing: .02em;}
    .ok { color: #1d8533;}
    .warn { color: #d8aa22;}
    .bad { color: #c21c1c;}
    .easa-alert {
        background: #fff7f6;
        border-left: 5px solid #c21c1c;
        color: #b51e14;
        font-weight: 600;
        font-size: 1.01rem;
        padding: 8px 15px 8px 17px;
        margin-bottom: 13px;
        margin-top: 9px;
    }
    .easa-pdf-section {margin-top:20px;}
    .stDownloadButton {margin-top:11px;}
    .easa-contact-panel {margin:44px auto 0 auto; max-width:370px; background:#f8fafd;padding:18px 20px 6px 20px; border:1px solid #e5e7ec;}
    .footer {margin-top:46px;font-size:0.96rem;color:#a0a8b6;text-align:center;}
    .stButton>button {width:100%;}
    .st-expander {border-radius:0;}
    .stRadio > label, .stRadio legend {font-size: 1.02em !important;}
    </style>
    """, unsafe_allow_html=True)
inject_css()

# ---- Aircraft Data ----
aircraft_data = {
    "Tecnam P2008": {
        "icon": "https://static.wixstatic.com/media/1424b0_7fc1d3d5b3574efcb9eebf6e49f09e42~mv2.png/v1/fit/w_210,h_56,al_c,q_80/file.png",
        "fuel_arm": 2.209,
        "pilot_arm": 1.800,
        "baggage_arm": 2.417,
        "max_takeoff_weight": 650,
        "max_fuel_volume": 124.0,
        "max_passenger_weight": 230,
        "max_baggage_weight": 20,
        "cg_limits": (1.841, 1.978),
        "fuel_density": 0.72,
        "units": {"weight": "kg", "arm": "m"}
    }
}
aircrafts_select = list(aircraft_data.keys()) + ["More aircraft coming soon..."]
afm_files = {
    "Tecnam P2008": "Tecnam_P2008_AFM.pdf"
}
def get_limits_text(ac):
    units = ac["units"]["weight"]
    arm_unit = ac["units"]["arm"]
    return [
        f"Max Takeoff Weight: {ac['max_takeoff_weight']} {units}",
        f"Max Fuel Volume: {ac['max_fuel_volume']} L",
        f"Max Pilot+Passenger: {ac['max_passenger_weight']} {units}",
        f"Max Baggage: {ac['max_baggage_weight']} {units}",
        f"CG Limits: {ac['cg_limits'][0]} to {ac['cg_limits'][1]} {arm_unit}",
    ]
def get_color(val, limit):
    if limit is None: return "ok"
    if val > limit:
        return "bad"
    elif val > (limit * 0.95):
        return "warn"
    else:
        return "ok"
def get_cg_color(cg, limits):
    if not limits: return "ok"
    mn, mx = limits
    margin = (mx - mn) * 0.05
    if cg < mn or cg > mx:
        return "bad"
    elif cg < mn + margin or cg > mx - margin:
        return "warn"
    else:
        return "ok"
def utc_now():
    return datetime.datetime.now(pytz.UTC)

# --- Layout ---
st.markdown(f'<div class="easa-header">Mass & Balance Calculation Tool</div>', unsafe_allow_html=True)

cols = st.columns([0.47, 0.06, 0.47], gap="large")

with cols[0]:
    st.markdown('<div class="easa-card">', unsafe_allow_html=True)
    # Aircraft selection and icon
    st.markdown("#### Aircraft Selection")
    aircraft = st.selectbox(
        "Aircraft type",
        aircrafts_select,
        index=0,
        help="Currently only Tecnam P2008 available. More aircraft coming soon..."
    )
    if aircraft not in aircraft_data:
        st.info("More aircraft will be available soon.")
        st.markdown('</div>', unsafe_allow_html=True)
        st.stop()
    ac = aircraft_data[aircraft]
    if "icon" in ac and ac["icon"]:
        st.image(ac["icon"], output_format="auto", use_container_width=True)
    afm_path = afm_files.get(aircraft)
    st.markdown('<div class="easa-limits"><ul>' + "".join([f"<li>{x}</li>" for x in get_limits_text(ac)]) + '</ul></div>', unsafe_allow_html=True)
    if afm_path and Path(afm_path).exists():
        with open(afm_path, "rb") as f:
            st.download_button("AFM Document", f, file_name=afm_path, mime="application/pdf")

    st.markdown("#### Input Masses")
    with st.form("input_form"):
        ew = st.number_input("Empty Weight", min_value=0.0, value=0.0, step=1.0, key="ew")
        ew_moment = st.number_input("Empty Weight Moment", min_value=0.0, value=0.0, step=1.0, key="ew_moment")
        ew_arm = ew_moment / ew if ew > 0 else 0.0
        pilot = st.number_input("Pilot & Passenger", min_value=0.0, value=0.0, step=1.0, key="pilot")
        bag1 = st.number_input("Baggage", min_value=0.0, value=0.0, step=1.0, key="bag1")
        bag2 = 0.0
        fuel_mode = st.radio(
            "Fuel Input Mode",
            ["Auto max fuel", "Manual fuel"],
            index=0, key="fuel_mode",
            help="Auto max fuel: Fuel will be maximized as per aircraft limitations (max takeoff weight or tank capacity). Manual fuel: Enter exact volume."
        )
        fuel_density = ac['fuel_density']
        if fuel_mode == "Manual fuel":
            fuel_vol = st.number_input("Fuel Volume (L)", min_value=0.0, value=0.0, step=1.0, key="fuel_vol")
            fuel_weight = fuel_vol * fuel_density
        st.form_submit_button("Update")
    st.markdown('</div>', unsafe_allow_html=True)

fuel_density = ac['fuel_density']
units_wt = ac['units']['weight']
units_arm = ac['units']['arm']

if fuel_mode == "Auto max fuel":
    useful_load = ac['max_takeoff_weight'] - (ew + pilot + bag1 + bag2)
    fuel_weight_possible = max(0.0, useful_load)
    tank_capacity_weight = ac['max_fuel_volume'] * fuel_density
    if fuel_weight_possible <= tank_capacity_weight:
        fuel_weight = fuel_weight_possible
        fuel_vol = fuel_weight / fuel_density
        fuel_limit_by = "Maximum Weight"
    else:
        fuel_weight = tank_capacity_weight
        fuel_vol = ac['max_fuel_volume']
        fuel_limit_by = "Tank Capacity"
else:
    fuel_limit_by = "Manual Entry"

m_empty = ew_moment
m_pilot = pilot * ac['pilot_arm']
m_bag1 = bag1 * ac['baggage_arm']
m_bag2 = 0.0
m_fuel = fuel_weight * ac['fuel_arm']

total_weight = ew + pilot + bag1 + bag2 + fuel_weight
total_moment = m_empty + m_pilot + m_bag1 + m_bag2 + m_fuel
cg = (total_moment / total_weight) if total_weight > 0 else 0
baggage_sum = bag1 + bag2
alert_list = []
if total_weight > ac['max_takeoff_weight']:
    alert_list.append("Total weight exceeds maximum takeoff weight.")
if bag1 > ac['max_baggage_weight']:
    alert_list.append("Baggage exceeds limit.")
if ac.get("max_passenger_weight") and pilot > ac["max_passenger_weight"]:
    alert_list.append("Pilot & Passenger exceed limit.")
if ac['cg_limits']:
    mn, mx = ac['cg_limits']
    if cg < mn or cg > mx:
        alert_list.append("CG outside safe envelope.")

with cols[2]:
    st.markdown('<div class="easa-card">', unsafe_allow_html=True)
    st.markdown('#### Calculation Summary')
    st.markdown('<div class="easa-summary">', unsafe_allow_html=True)
    if fuel_mode == "Auto max fuel":
        st.markdown(
            f'<div class="easa-summary-row">'
            f'<div class="easa-summary-label">Fuel possible</div>'
            f'<div class="easa-summary-val ok">{fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt} '
            f'<span style="color:#8c8c8c;font-size:0.97em;">[Limited by {"tank capacity" if fuel_limit_by=="Tank Capacity" else "maximum weight"}]</span></div></div>',
            unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="easa-summary-row"><div class="easa-summary-label">Fuel</div><div class="easa-summary-val ok">{fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="easa-summary-row"><div class="easa-summary-label">Total Weight</div><div class="easa-summary-val {get_color(total_weight, ac["max_takeoff_weight"])}">{total_weight:.2f} {units_wt}</div></div>', unsafe_allow_html=True)
    st.markdown(f'<div class="easa-summary-row"><div class="easa-summary-label">Total Moment</div><div class="easa-summary-val">{total_moment:.2f} {units_wt}·{units_arm}</div></div>', unsafe_allow_html=True)
    if ac['cg_limits']:
        st.markdown(f'<div class="easa-summary-row"><div class="easa-summary-label">CG</div><div class="easa-summary-val {get_cg_color(cg, ac["cg_limits"])}">{cg:.3f} {units_arm}</div></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="easa-summary-row"><div class="easa-summary-label">CG Limits</div><div class="easa-summary-val">{ac["cg_limits"][0]:.3f} to {ac["cg_limits"][1]:.3f} {units_arm}</div></div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    for a in alert_list:
        st.markdown(f'<div class="easa-alert">{a}</div>', unsafe_allow_html=True)

    # --- Mass & Balance Table ---
    st.markdown('#### Mass & Balance Table')
    items = [
        ("Empty Weight", ew, ew_arm, m_empty),
        ("Pilot & Passenger", pilot, ac['pilot_arm'], m_pilot),
        ("Baggage", bag1, ac['baggage_arm'], m_bag1),
        ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
    ]
    def mb_table(items, units_wt, units_arm):
        table = '<table class="easa-table">'
        table += (
            "<tr>"
            "<th>Item</th>"
            f"<th>Weight<br>({units_wt})</th>"
            f"<th>Arm<br>({units_arm})</th>"
            f"<th>Moment<br>({units_wt}·{units_arm})</th>"
            "</tr>"
        )
        for i in items:
            table += f"<tr><td>{i[0]}</td><td>{i[1]:.2f}</td><td>{i[2]:.3f}</td><td>{i[3]:.2f}</td></tr>"
        table += "</table>"
        return table
    st.markdown(mb_table(items, units_wt, units_arm), unsafe_allow_html=True)

    # --- PDF GENERATION ---
    st.markdown('#### PDF Report')
    with st.expander("Generate PDF report", expanded=False):
        pilot_name = st.text_input('Pilot name / Prepared by *', value="")
        registration = st.text_input("Aircraft registration", value="CS-XXX")
        mission_number = st.text_input("Mission number", value="001")
        utc_today = utc_now()
        default_datetime = utc_today.strftime("%Y-%m-%d %H:%M UTC")
        flight_datetime_utc = st.text_input("Scheduled flight date and time (UTC)", value=default_datetime)
        pilot_name_valid = bool(pilot_name.strip())
        pdf_button = st.button("Generate PDF with current values", disabled=not pilot_name_valid)
        if pdf_button and pilot_name_valid:
            pdf = CustomPDF()
            pdf.set_auto_page_break(auto=True, margin=10)
            pdf.add_page()
            pdf.set_fill_color(34,34,34)
            pdf.rect(0, 0, 210, 15, 'F')
            pdf.set_font("Arial", 'B', 15)
            pdf.set_text_color(255,255,255)
            pdf.set_xy(10,7)
            pdf.cell(0, 7, ascii_safe("MASS & BALANCE REPORT"), ln=True, align='L')
            pdf.set_text_color(0,0,0)
            pdf.set_xy(10,20)
            pdf.ln(3)
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 7, ascii_safe(f"{aircraft}  |  {registration}"), ln=True)
            pdf.set_font("Arial", '', 11)
            pdf.cell(0, 6, ascii_safe(f"Mission Number: {mission_number}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Flight (UTC): {flight_datetime_utc}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Prepared by: {pilot_name}"), ln=True)
            pdf.cell(0, 6, ascii_safe("Operator: Sevenair Academy"), ln=True)
            pdf.ln(2)
            pdf.set_font("Arial", 'B', 10)
            pdf.cell(0, 6, ascii_safe("Operational Limits:"), ln=True)
            pdf.set_font("Arial", '', 9)
            for line in get_limits_text(ac):
                pdf.cell(0, 5, ascii_safe(line), ln=True)
            pdf.ln(1)
            pdf.set_font("Arial", 'B', 10)
            col_widths = [45, 36, 34, 55]
            headers = ["Item", f"Weight ({ac['units']['weight']})", f"Arm ({ac['units']['arm']})", f"Moment ({ac['units']['weight']}·{ac['units']['arm']})"]
            for h, w in zip(headers, col_widths):
                pdf.cell(w, 7, ascii_safe(h), border=1, align='C')
            pdf.ln()
            pdf.set_font("Arial", '', 9)
            rows = [
                ("Empty Weight", ew, ew_arm, m_empty),
                ("Pilot & Passenger", pilot, ac['pilot_arm'], m_pilot),
                ("Baggage", bag1, ac['baggage_arm'], m_bag1),
                ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
            ]
            for row in rows:
                for val, w in zip(row, col_widths):
                    if isinstance(val, str):
                        pdf.cell(w, 7, ascii_safe(val), border=1)
                    else:
                        pdf.cell(w, 7, ascii_safe(f"{val:.2f}" if isinstance(val, float) else str(val)), border=1, align='C')
                pdf.ln()
            pdf.ln(1)
            pdf.set_font("Arial", 'B', 10)
            pdf.set_text_color(50,50,50)
            fuel_str = f"Fuel: {fuel_vol:.1f} L / {fuel_weight:.1f} {ac['units']['weight']} ({'Limited by tank capacity' if fuel_limit_by == 'Tank Capacity' else 'Limited by maximum weight'})"
            pdf.cell(0, 6, ascii_safe(fuel_str), ln=True)
            pdf.set_text_color(0,0,0)
            pdf.cell(0, 6, ascii_safe(f"Total Weight: {total_weight:.2f} {ac['units']['weight']}"), ln=True)
            pdf.cell(0, 6, ascii_safe(f"Total Moment: {total_moment:.2f} {ac['units']['weight']}·{ac['units']['arm']}"), ln=True)
            if ac['cg_limits']:
                pdf.cell(0, 6, ascii_safe(f"CG: {cg:.3f} {ac['units']['arm']}"), ln=True)
            if alert_list:
                pdf.set_font("Arial", 'B', 9)
                pdf.set_text_color(200,0,0)
                for a in list(dict.fromkeys(alert_list)):
                    pdf.cell(0, 6, ascii_safe(f"WARNING: {a}"), ln=True)
                pdf.set_text_color(0,0,0)
            pdf_file = f"mass_balance_mission{mission_number}.pdf"
            pdf.output(pdf_file)
            with open(pdf_file, "rb") as f:
                st.download_button("Download PDF", f, file_name=pdf_file, mime="application/pdf")
            st.success("PDF generated successfully!")
    st.markdown('</div>', unsafe_allow_html=True)

# --- Contact/Feedback and Footer (spanning page width) ---
st.markdown('<div class="footer">Site developed by Alexandre Moiteiro. All rights reserved. | EASA mass & balance tool concept</div>', unsafe_allow_html=True)
with st.expander("Contact / Suggestion / Bug", expanded=False):
    st.markdown('<div class="easa-contact-panel">If you want to send a suggestion, report a bug, or contact the site administrator, fill in below:</div>', unsafe_allow_html=True)
    sug_name = st.text_input("Your name", value="", key="sug_nome_footer")
    sug_email = st.text_input("Your email (optional)", value="", key="sug_email_footer")
    sug_msg = st.text_area("Message", height=70, max_chars=900, key="sug_msg_footer")
    sug_send = st.button("Send message", key="sug_btn_footer")
    if sug_send:
        if not sug_msg.strip():
            st.warning("Please write your message before sending.")
        else:
            def send_suggestion_email(name, email, msg):
                html_body = f"""
                <html>
                <body>
                    <h2>Suggestion, bug, or message via Mass & Balance</h2>
                    <table style='border-collapse:collapse;'>
                        <tr><th align='left'>Name</th><td>{name}</td></tr>
                        <tr><th align='left'>Email</th><td>{email}</td></tr>
                    </table>
                    <p style='margin-top:1.2em;'><b>Message:</b><br>{msg}</p>
                </body>
                </html>
                """
                data = {
                    "personalizations": [
                        {
                            "to": [{"email": ADMIN_EMAIL}],
                            "subject": "Suggestion/Bug/Contact from Mass & Balance site"
                        }
                    ],
                    "from": {"email": "alexandre.moiteiro@gmail.com"},
                    "content": [
                        {
                            "type": "text/html",
                            "value": html_body
                        }
                    ]
                }
                headers = {
                    "Authorization": f"Bearer {SENDGRID_API_KEY}",
                    "Content-Type": "application/json"
                }
                requests.post("https://api.sendgrid.com/v3/mail/send", data=json.dumps(data), headers=headers)
            send_suggestion_email(sug_name, sug_email, sug_msg)
            st.success("Message sent successfully. Thank you for your feedback.")




