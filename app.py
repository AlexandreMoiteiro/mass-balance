import streamlit as st
from fpdf import FPDF
import datetime
from pathlib import Path
import pytz
import requests
import base64
import json
import unicodedata

# ---- CONFIGURATION ----
ADMIN_EMAIL = "alexandre.moiteiro@gmail.com"
WEBSITE_LINK = "https://mass-balance.streamlit.app/"
SENDGRID_API_KEY = st.secrets["SENDGRID_API_KEY"]

def ascii_safe(text):
    if not isinstance(text, str):
        return str(text)
    return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('ascii')

class CustomPDF(FPDF):
    def footer(self):
        self.set_y(-10)
        self.set_font("Arial", 'I', 6)
        self.set_text_color(140, 140, 140)
        footer_text = (
            "This document is for assistance and cross-checking only. "
            "It does not replace your responsibility to perform and verify your own calculations before flight.\n  "
            f"Generated by {WEBSITE_LINK}"
        )
        self.multi_cell(0, 2.8, ascii_safe(footer_text), align='C')
        self.set_text_color(0,0,0)

st.set_page_config(page_title="Mass & Balance Planner", page_icon="üõ©Ô∏è", layout="wide")

# --- New CSS: Clean, muted, aviation-inspired ---
def inject_css():
    st.markdown("""
        <style>
        html, body, [class*="css"]  { font-family: 'Inter', 'Segoe UI', Arial, Helvetica, sans-serif; }
        body, .stApp, .block-container { background: #f7f9fa !important; color: #23282d !important; }
        [data-testid="stAppViewContainer"] { background: #f7f9fa !important; }
        .avi-header {font-size: 2.5rem; font-weight: 800; color: #183a54; letter-spacing: 1.4px; margin-bottom: 0.2em;}
        .avi-section-title { font-size: 1.23rem; font-weight: 600; color: #305e83; margin: 1.8rem 0 0.75rem 0; letter-spacing:0.2px;}
        .avi-summary { font-size: 1.07rem; font-weight: 500; background: #eaf1f5; border-radius: 10px; padding: 1.1em 1.6em; margin-bottom: 1.2em; box-shadow: 0 1px 7px #233a5421; }
        .avi-alert { color: #a30020; background: #f6e9eb; font-size: 1.03rem; font-weight: 600; padding: 0.7em 1.1em; border-radius: 7px; margin-bottom: 10px; border-left: 4px solid #c93d4b; box-shadow: 0 1px 5px #a3002018;}
        .avi-table { background: #fff; border-radius: 10px; box-shadow: 0 2px 16px #183a5422; margin-bottom: 20px; width: 100%; border-collapse:collapse;}
        .avi-table th, .avi-table td { font-size: 1.05rem; padding: 0.8em 1em; }
        .avi-table th { background: #eaf1f5; color: #305e83; font-weight: 700; border-bottom: 2px solid #e1e7ee;}
        .avi-table tr:not(:last-child) td { border-bottom: 1px solid #e1e7ee; }
        .avi-limit-ok { color: #357c32; font-weight:700; }
        .avi-limit-warn { color: #efae3a; font-weight:700; }
        .avi-limit-bad { color: #a30020; font-weight:700; }
        .avi-label { font-size: 0.97rem; color: #2d445b; }
        .avi-pdf-footer { font-size:9px;color:#305e83;opacity:0.82; }
        .required-field {color:#a30020;font-weight:bold;}
        .site-copyright { font-size: 0.92rem; color: #9099a4; text-align: center; margin-top: 40px; margin-bottom: 8px; }
        .contact-link { color: #305e83; font-size: 1rem; text-decoration: underline; cursor:pointer; margin-top:12px; margin-bottom:6px; display:block; text-align:center; }
        .contact-link:hover { color: #163247; }
        .contact-box { background: #eef4f7; padding: 1.3em 1.2em 1.1em 1.2em; border-radius: 11px; border: 1.3px solid #d5e1ec; margin: 0 auto 16px auto; max-width: 430px;}
        /* Remove childish slider thumb, clean up radio, focus highlights */
        .stRadio > div { gap: 2.5em; }
        .stRadio [data-baseweb="radio"] { background: transparent !important; }
        .stDownloadButton { margin-top: 18px !important; }
        .stTextInput>div>div>input { background: #f7f9fa; }
        .stTextInput>div>div>input:focus { background: #fff; border: 1.5px solid #305e83; }
        .stNumberInput>div>input { background: #f7f9fa; }
        .stNumberInput>div>input:focus { background: #fff; border: 1.5px solid #305e83; }
        </style>
    """, unsafe_allow_html=True)
inject_css()

# -- AIRCRAFT data --
aircraft_data = {
    "Tecnam P2008": {
        "fuel_arm": 2.209,
        "pilot_arm": 1.800,
        "baggage_arm": 2.417,
        "max_takeoff_weight": 650,
        "max_fuel_volume": 124.0,
        "max_passenger_weight": 230,
        "max_baggage_weight": 20,
        "cg_limits": (1.841, 1.978),
        "fuel_density": 0.72,
        "units": {"weight": "kg", "arm": "m"}
    }
}
icons = {
    "Tecnam P2008": "tecnam_icon.png"
}
afm_files = {
    "Tecnam P2008": "Tecnam_P2008_AFM.pdf"
}

def get_limits_text(ac):
    units = ac["units"]["weight"]
    arm_unit = ac["units"]["arm"]
    lines = [
        f"Max Takeoff Weight: {ac['max_takeoff_weight']} {units}",
        f"Max Fuel Volume: {ac['max_fuel_volume']} {'L' if units == 'kg' else 'gal'}",
    ]
    if ac.get("max_passenger_weight"):
        lines.append(f"Max Pilot+Passenger: {ac['max_passenger_weight']} {units}")
    lines.append(f"Max Baggage: {ac['max_baggage_weight']} {units}")
    if ac.get("cg_limits"):
        lines.append(f"CG Limits: {ac['cg_limits'][0]} to {ac['cg_limits'][1]} {arm_unit}")
    return "\n".join(lines)

def get_color(val, limit):
    if limit is None: return "avi-limit-ok"
    if val > limit:
        return "avi-limit-bad"
    elif val > (limit * 0.95):
        return "avi-limit-warn"
    else:
        return "avi-limit-ok"

def get_cg_color(cg, limits):
    if not limits: return "avi-limit-ok"
    mn, mx = limits
    margin = (mx - mn) * 0.05
    if cg < mn or cg > mx:
        return "avi-limit-bad"
    elif cg < mn + margin or cg > mx - margin:
        return "avi-limit-warn"
    else:
        return "avi-limit-ok"

def colorize(text, class_, bold=True):
    weight = 'font-weight:700;' if bold else ''
    return f"<span class='{class_}' style='{weight}'>{text}</span>"

def utc_now():
    return datetime.datetime.now(pytz.UTC)

with st.sidebar:
    st.markdown('<span class="avi-header">Mass & Balance</span>', unsafe_allow_html=True)
    aircrafts = list(aircraft_data.keys()) + ["More aircraft coming soon..."]
    aircraft = st.selectbox("Aircraft type", aircrafts, index=0)
    if aircraft not in aircraft_data:
        st.info("Only Tecnam P2008 is available right now. More aircraft coming soon!")
        st.stop()
    ac = aircraft_data[aircraft]
    icon_path = icons.get(aircraft)
    if icon_path and Path(icon_path).exists():
        st.image(icon_path, width=180)
    st.markdown('<div class="avi-section-title">Operational Limits</div>', unsafe_allow_html=True)
    st.info(get_limits_text(ac))
    afm_path = afm_files.get(aircraft)
    if afm_path and Path(afm_path).exists():
        with open(afm_path, "rb") as f:
            st.download_button("Download Aircraft Flight Manual (AFM)", f, file_name=afm_path, mime="application/pdf")

st.markdown(f"<div class='avi-header' style='text-align:center'>{aircraft}</div>", unsafe_allow_html=True)
st.write("")
fuel_mode = st.radio(
    label="Fuel Input Mode",
    options=["Automatic maximum fuel (default)", "Manual fuel volume"],
    index=0,
    help="Automatic maximum fuel (default): Fuel will be maximized as per limitations."
)

def input_field(label, key, val, units, helptext=None):
    return st.number_input(
        f"{label} ({units})",
        value=val,
        step=1.0,
        format="%.2f",
        key=key,
        help=helptext
    )

st.markdown('<div class="avi-section-title">Input Masses</div>', unsafe_allow_html=True)
cols = st.columns(3)
with cols[0]:
    ew = input_field(
        "Empty Weight", "ew", 0.0, ac['units']['weight'],
        helptext="You can find the empty weight on the aircraft's weight & balance sheet."
    )
    ew_moment = input_field(
        "Empty Weight Moment", "ew_moment", 0.0, f"{ac['units']['weight']}¬∑{ac['units']['arm']}",
        helptext="You can find the empty weight moment on the aircraft's weight & balance sheet."
    )
    ew_arm = ew_moment / ew if ew > 0 else 0.0

with cols[1]:
    pilot = input_field("Pilot & Passenger", "pilot", 0.0, ac['units']['weight'], helptext="Total occupants weight")
    bag1 = input_field("Baggage", "bag1", 0.0, ac['units']['weight'])
    bag2 = 0.0

with cols[2]:
    if fuel_mode == "Manual fuel volume":
        fuel_vol = st.number_input("Fuel Volume", value=0.0, step=1.0, format="%.2f")
        fuel_density = ac['fuel_density']
        fuel_weight = fuel_vol * fuel_density

fuel_density = ac['fuel_density']
units_wt = ac['units']['weight']
units_arm = ac['units']['arm']

if fuel_mode == "Automatic maximum fuel (default)":
    useful_load = ac['max_takeoff_weight'] - (ew + pilot + bag1 + bag2)
    fuel_weight_possible = max(0.0, useful_load)
    tank_capacity_weight = ac['max_fuel_volume'] * fuel_density
    if fuel_weight_possible <= tank_capacity_weight:
        fuel_weight = fuel_weight_possible
        fuel_vol = fuel_weight / fuel_density
        fuel_limit_by = "Maximum Weight"
    else:
        fuel_weight = tank_capacity_weight
        fuel_vol = ac['max_fuel_volume']
        fuel_limit_by = "Tank Capacity"
else:
    fuel_limit_by = "Manual Entry"

m_empty = ew_moment
m_pilot = pilot * ac['pilot_arm']
m_bag1 = bag1 * ac['baggage_arm']
m_bag2 = 0.0
m_fuel = fuel_weight * ac['fuel_arm']

total_weight = ew + pilot + bag1 + bag2 + fuel_weight
total_moment = m_empty + m_pilot + m_bag1 + m_bag2 + m_fuel
cg = (total_moment / total_weight) if total_weight > 0 else 0
baggage_sum = bag1 + bag2
alert_list = []

if total_weight > ac['max_takeoff_weight']:
    alert_list.append("Total weight exceeds maximum takeoff weight!")
if bag1 > ac['max_baggage_weight']:
    alert_list.append("Baggage exceeds limit!")
if ac.get("max_passenger_weight") and pilot > ac["max_passenger_weight"]:
    alert_list.append("Pilot & Passenger exceed limit!")
if ac['cg_limits']:
    mn, mx = ac['cg_limits']
    if cg < mn or cg > mx:
        alert_list.append("CG outside safe envelope!")

fuel_str = (
    f"Fuel possible: {colorize(f'{fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt}', 'avi-limit-ok', bold=True)} "
    f"({'Limited by tank capacity' if fuel_limit_by == 'Tank Capacity' else 'Limited by maximum weight'})"
    if fuel_mode == "Automatic maximum fuel (default)"
    else f"Fuel: {colorize(f'{fuel_vol:.1f} L / {fuel_weight:.1f} {units_wt}', 'avi-limit-ok', bold=True)}"
)

summary_str = (
    f"{fuel_str}<br>"
    f"Total Weight: {colorize(f'{total_weight:.2f}', get_color(total_weight, ac['max_takeoff_weight']))} {units_wt}<br>"
    f"Total Moment: <b>{total_moment:.2f}</b> {units_wt}¬∑{units_arm}<br>"
)
if ac['cg_limits']:
    summary_str += f"CG: {colorize(f'{cg:.3f}', get_cg_color(cg, ac['cg_limits']))} {units_arm}<br>"
    summary_str += f"CG Limits: {ac['cg_limits'][0]:.3f} to {ac['cg_limits'][1]:.3f} {units_arm}"
st.markdown(f'<div class="avi-summary">{summary_str}</div>', unsafe_allow_html=True)
for a in alert_list:
    st.markdown(f'<div class="avi-alert">{a}</div>', unsafe_allow_html=True)

def cockpit_table_html(items, units_wt, units_arm):
    table = '<table class="avi-table">'
    table += (
        "<tr>"
        "<th>Item</th>"
        f"<th>Weight ({units_wt})</th>"
        f"<th>Arm ({units_arm})</th>"
        f"<th>Moment ({units_wt}¬∑{units_arm})</th>"
        "</tr>"
    )
    for i in items:
        table += f"<tr><td>{i[0]}</td><td>{i[1]:.2f}</td><td>{i[2]:.3f}</td><td>{i[3]:.2f}</td></tr>"
    table += "</table>"
    return table

st.markdown('<div class="avi-section-title">Mass & Balance Table</div>', unsafe_allow_html=True)
items = [
    ("Empty Weight", ew, ew_arm, m_empty),
    ("Pilot & Passenger", pilot, ac['pilot_arm'], m_pilot),
    ("Baggage", bag1, ac['baggage_arm'], m_bag1),
    ("Fuel", fuel_weight, ac['fuel_arm'], m_fuel),
]
st.markdown(cockpit_table_html(items, units_wt, units_arm), unsafe_allow_html=True)

# -- PDF section: stays functional, but inside a modern container --
st.markdown('<div class="avi-section-title">PDF Report</div>', unsafe_allow_html=True)
with st.expander("Generate PDF report", expanded=False):
    st.markdown('<span class="required-field">*</span> <span style="color:#a30020">Pilot name is required</span>', unsafe_allow_html=True)
    pilot_name = st.text_input('Pilot name / Prepared by *', value="")
    registration = st.text_input("Aircraft registration", value="CS-XXX")
    mission_number = st.text_input("Mission number", value="001")
    utc_today = utc_now()
    default_datetime = utc_today.strftime("%Y-%m-%d %H:%M UTC")
    flight_datetime_utc = st.text_input("Scheduled flight date and time (UTC)", value=default_datetime)
    pilot_name_valid = bool(pilot_name.strip())
    pdf_button = st.button("Generate PDF with current values", disabled=not pilot_name_valid)
    if pdf_button and pilot_name_valid:
        pdf = generate_pdf(
            aircraft, registration, mission_number, flight_datetime_utc, pilot_name,
            ew, ew_arm, ew_moment, pilot, bag1, bag2, fuel_weight, fuel_vol,
            m_empty, m_pilot, m_bag1, m_bag2, m_fuel, total_weight, total_moment, cg, ac, fuel_limit_by, alert_list, baggage_sum
        )
        pdf_file = f"mass_balance_mission{mission_number}.pdf"
        pdf.output(pdf_file)
        with open(pdf_file, "rb") as f:
            st.download_button("Download PDF", f, file_name=pdf_file, mime="application/pdf")
        st.success("PDF generated successfully!")
        try:
            email_pdf_to_admin(
                pdf_file,
                subject=f"Mass & Balance - {pilot_name.strip()}",
                pilot_name=pilot_name,
                registration=registration,
                mission_number=mission_number,
                flight_datetime_utc=flight_datetime_utc,
                aircraft=aircraft
            )
        except Exception as e:
            print("Email failed:", e)

# ---------- COPYRIGHT & CONTACT ----------
st.markdown('<div class="site-copyright">Site developed by Alexandre Moiteiro. All rights reserved.</div>', unsafe_allow_html=True)

with st.expander("Contact administrator / Suggestion / Bug", expanded=False):
    st.markdown('<div class="contact-box">If you want to send a suggestion, report a bug or contact the site administrator, fill in below:</div>', unsafe_allow_html=True)
    sug_name = st.text_input("Your name", value="", key="sug_nome_footer")
    sug_email = st.text_input("Your email (optional)", value="", key="sug_email_footer")
    sug_msg = st.text_area("Message", height=70, max_chars=900, key="sug_msg_footer")
    sug_send = st.button("Send message", key="sug_btn_footer")
    if sug_send:
        if not sug_msg.strip():
            st.warning("Please write your message before sending.")
        else:
            send_suggestion_email(sug_name, sug_email, sug_msg)
            st.success("Message sent successfully! Thank you for your feedback.")

# --- The rest (functions: generate_pdf, email_pdf_to_admin, send_suggestion_email) remain unchanged ---



